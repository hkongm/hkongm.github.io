{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/ReactJSForStupidPeople","result":{"data":{"markdownRemark":{"id":"25fe8f41-4b51-52b8-81b2-ab4643844330","html":"<blockquote>\n<p>原文地址：<a href=\"http://blog.andrewray.me/reactjs-for-stupid-people/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.andrewray.me/reactjs-for-stupid-people/</a></p>\n</blockquote>\n<blockquote>\n<p>篇幅过长，没有阅读（<a href=\"http://zhidao.baidu.com/link?url=J-CJXq3dC4oPgQacI5pukD_S4-9HagnMMGB4YJT9hUFufaHxH7enybUz7e6vBEpW4IyV8wOZqNLvl_CMEYs6Jq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TL;DR</a>）。我挣扎了很久，试图理解React是个啥，它整个的架构是个啥。这篇文章正好满足了我的这个愿望。</p>\n</blockquote>\n<h2 id=\"react是什么\" style=\"position:relative;\"><a href=\"#react%E6%98%AF%E4%BB%80%E4%B9%88\" aria-label=\"react是什么 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React是什么</h2>\n<p>React与Angular，Ember，Backbone这类框架相比到底有啥区别？怎么处理数据？怎么与服务器通信？JSX又是TMD啥东东？“组件（component）”又应该怎么理解？</p>\n<p>停</p>\n<p>立马停止</p>\n<h3 id=\"react只是一个视图层的东西\" style=\"position:relative;\"><a href=\"#react%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE%E5%B1%82%E7%9A%84%E4%B8%9C%E8%A5%BF\" aria-label=\"react只是一个视图层的东西 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React只是一个视图层的东西</h3>\n<!-- more -->\n<p>近来，在讨论JS框架的时候，React经常会被提及，但“React对比Angular”这种说法根本就不合理，因为他们就不是一种东西（框架）。Angular是一个完整的框架（包括视图），React则不是这么一种完备的框架。这就是为什么React这么难以理解，虽然目前正在形成一个基于React框架的完整的生态系统，但它本质上只是一个视图（view）。</p>\n<p><em>译者注：View layer指的是MVC的V，这里翻译成视图层</em></p>\n<p>React提供给我们一套模板语言和一些功能函数，让我们任意操作和渲染我们的HTML。HTML就是React输出的所有内容了。HTML/Javascript这样的组合，我们称之为“组件（Components）”，而这些组件又可以在内存中保存自己的一些状态（比如在tab选择组件中保存当前选择的哪个tab），但是说到底，这些依然只是HTML。</p>\n<p>你绝对<strong>不可能单独使用React来创建一个功能健全的动态应用程序</strong>。下面就让我们来看下为什么。</p>\n<h2 id=\"优点\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E7%82%B9\" aria-label=\"优点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h2>\n<p>在使用React一段时间后，我发现它3个很重要的优点（benefits surface：优势面）。</p>\n<h4 id=\"1-你可以只观察一个源文件就知道组件会如何渲染页面\" style=\"position:relative;\"><a href=\"#1-%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%8F%AA%E8%A7%82%E5%AF%9F%E4%B8%80%E4%B8%AA%E6%BA%90%E6%96%87%E4%BB%B6%E5%B0%B1%E7%9F%A5%E9%81%93%E7%BB%84%E4%BB%B6%E4%BC%9A%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2\" aria-label=\"1 你可以只观察一个源文件就知道组件会如何渲染页面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 你可以只观察一个源文件就知道组件会如何渲染页面</h4>\n<p>这也许是所有优势中最重要的一个，他和Angular提供的模板完全不同。让我们用一个真实的例子来说明下。</p>\n<p>在你没有使用Javascript MVC框架的情况下，你想在用户登陆后改变页面头部的状态，你可能会这么做：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>  </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">user</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Modify the DOM here</span>\n  <span class=\"token comment\">// 在这里修改DOM</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header .name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我可以凭经验告诉你，这段代码足以葬送你还有你朋友们的一生。你怎么调试输出结果？谁来更新头部？还有谁在使用头部的HTML？谁来保证当用户名显示出来时的实际效果？这个DOM操作就<strong>像GOTO跳转语句一样烂</strong>皆因你写的这段程序。</p>\n<p>下面是用React重写的版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>header<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以马上告诉这个组件将怎样渲染。如果你知道当前的状态，你就可以知道渲染输出的结果。你不必调试你的程序流。当我们在开发一个复杂的应用程序时，特别是团队合作的项目是，这是非常重要（critically致命）的一点。</p>\n<h4 id=\"2-使用包含javascript和html的jsx来制作组件，使理解起来更容易\" style=\"position:relative;\"><a href=\"#2-%E4%BD%BF%E7%94%A8%E5%8C%85%E5%90%ABjavascript%E5%92%8Chtml%E7%9A%84jsx%E6%9D%A5%E5%88%B6%E4%BD%9C%E7%BB%84%E4%BB%B6%EF%BC%8C%E4%BD%BF%E7%90%86%E8%A7%A3%E8%B5%B7%E6%9D%A5%E6%9B%B4%E5%AE%B9%E6%98%93\" aria-label=\"2 使用包含javascript和html的jsx来制作组件，使理解起来更容易 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 使用包含Javascript和HTML的JSX来制作组件，使理解起来更容易</h4>\n<p>混和着HTML和Javascript的这怪异的一锅粥（soup：汤）可能使你退缩。从我们成为一名程序员那时起，就习惯了不在DOM中写Javascript（比如 <code class=\"language-text\">onClick</code> 处理函数）。你要相信我，写JSX组件是非常棒的体验。</p>\n<p>一般来讲，我们要隔离视图（HTML）与功能（Javascript）。这就导致了我们大量的Javascript文件包含了一个“页面”的所有功能，而后，你不得这复杂的环境中（JS到HTML再到JS）调试，追踪错误等。</p>\n<p>一般的情况下，直接编写（单一）功能并打包为一个随处可用的标签，这样的自包含“组件”会让这个编码过程变得更快乐、更干净。既然你的Javascript代码和HTML是密不可分的，那么就让他们幸福滴在一起吧。</p>\n<h3 id=\"你可以在服务端渲染react\" style=\"position:relative;\"><a href=\"#%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93react\" aria-label=\"你可以在服务端渲染react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>你可以在服务端渲染React</h3>\n<p>如果你正在构建一个公开站点或者App，而同时又遵循着“所有渲染应该发生在客户端”这一原则的话，那么你就错了。为什么 <a href=\"https://soundcloud.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Soundcloud</a> 感觉很慢，而 <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stack Overflow</a> 感觉非常快？皆因前者是单客户端渲染机制。你可以<a href=\"https://www.npmjs.org/package/react-server-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在服务端渲染React</a>，而且你也应该尝试下。</p>\n<p>Angular和其他的框架鼓励你做一些：使用PhantomJS渲染你的页面；基于UA为了搜索引擎爬虫做服务或者<a href=\"https://prerender.io/pricing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">为类似的服务付钱</a>，诸如此类恶心的事情。</p>\n<h2 id=\"缺点\" style=\"position:relative;\"><a href=\"#%E7%BC%BA%E7%82%B9\" aria-label=\"缺点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h2>\n<p>不要忘了React<strong>只是个视图</strong>。</p>\n<h4 id=\"1-你不会从react中找到下面任何一个功能\" style=\"position:relative;\"><a href=\"#1-%E4%BD%A0%E4%B8%8D%E4%BC%9A%E4%BB%8Ereact%E4%B8%AD%E6%89%BE%E5%88%B0%E4%B8%8B%E9%9D%A2%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD\" aria-label=\"1 你不会从react中找到下面任何一个功能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 你不会从React中找到下面任何一个功能</h4>\n<ul>\n<li>事件系统（（即使是）与vanilla DOM 事件相比）</li>\n<li>AJAX功能</li>\n<li>数据层（Model）的表单</li>\n<li>Promises</li>\n<li>完整应用程序框架</li>\n<li>任何基于上面功能的想法</li>\n</ul>\n<p><em>译者注：Vanilla JS，世界上最轻量级的Javascript框架。</em></p>\n<p>React在它自己的<strong>对真实世界是毫无用处</strong>上（这句好难翻，貌似少个谓语动词，很不通，大意就是比较烂）。更糟糕的是，正如我们所看到的，这促使每个人重新发明轮子。</p>\n<h4 id=\"2官方文档超级烂\" style=\"position:relative;\"><a href=\"#2%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E8%B6%85%E7%BA%A7%E7%83%82\" aria-label=\"2官方文档超级烂 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.官方文档超级烂</h4>\n<p>重提一句，本篇博客是为新手（笨笨）写的。看看<a href=\"http://facebook.github.io/react/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档页面</a>侧栏的第一部分吧：</p>\n<p><img src=\"http://blog.andrewray.me/content/images/2014/Sep/Screen-Shot-2014-09-22-at-12-08-18-AM.png\" alt=\"Quick Start\"></p>\n<p>快速开始向导这里只有3个部分。即便是我在没喝醉的情况下，我依然崩溃（万念俱灰）了。更下面的部分简直可以称得上是噩梦，这些章节很明显不应该出现在这里，比如“更多的参考”和“PureRenderMixin”<em>（译者注：这个词专有名词不翻）</em>。</p>\n<h4 id=\"3-react库代码量大\" style=\"position:relative;\"><a href=\"#3-react%E5%BA%93%E4%BB%A3%E7%A0%81%E9%87%8F%E5%A4%A7\" aria-label=\"3 react库代码量大 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. React库代码量大</h4>\n<p>更新：React并不是我之前文章写的144kb大，如下图，在<strong>gzip</strong>后，大约是<strong>35kb</strong>。</p>\n<p><em>译者注：上面一段是博客原文评论区有个网友回复提出来的观点，后作者对本文做了上面一段的更正。</em></p>\n<p><img src=\"http://blog.andrewray.me/content/images/2014/Oct/react-size.png\" alt=\"瀑布图\"></p>\n<p>这是在<strong>不加载任何React插件库</strong>的情况下的结果！</p>\n<p>这是在<strong>不加载ES5 Shim库</strong>的情况下，不用考虑支持IE8浏览器的情况下的结果！</p>\n<p>这是在<strong>不加载</strong>任何应用程序库（上面提到的Angular/Backbone等等）的情况下的结果。</p>\n<p><em>译者注：作者连说了三遍，表示对这种情况已经怒不可遏了</em></p>\n<p>相对于Angular这个完整的应用程序框架，React本身大小已经堪比Angular了。React还老老实实地提供了许多你会用到的小功能使自己变得臃肿，其希望我们在开发中能提升效率。</p>\n<h2 id=\"不要再谈论flux了\" style=\"position:relative;\"><a href=\"#%E4%B8%8D%E8%A6%81%E5%86%8D%E8%B0%88%E8%AE%BAflux%E4%BA%86\" aria-label=\"不要再谈论flux了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不要再谈论Flux了</h2>\n<p>也许，“Flux”是使用React进行开发时，被争执最多的一个部分了。它远比React自身更加的难理解。“Flux”这个名字就已经很装逼了。</p>\n<p><strong>根本没有Flux这个东西。</strong> Flux是一个概念，不是库。好吧，这里算有这么个<a href=\"https://github.com/facebook/flux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">库</a></p>\n<blockquote>\n<p>“Flux比起库更像个模式”</p>\n</blockquote>\n<p>呃。最烂的部分就是这个名字：React并没有重新发明（颠覆）过去40年来的UI架构知识体系也并没有带来数据管理的新理念。</p>\n<p><strong>“Flux”概念简单得如下</strong>，你的视图（<em>译者注：MVC中的V</em>）触发一个事件，这个事件更新了一个模型（<em>译者注：MVC中的M</em>），然后这个模型再触发一个事件，这个视图（<em>译者注：MVC中的M</em>）响应刚刚这个由模型触发的事件，使用最新的数据再渲染。<strong>仅此而已</strong>。</p>\n<p>这种单向数据流 / 解耦的观察者模式被设计成可以保证你有效的数据一直存在你的存储器或者模型中。这是一个好事。</p>\n<p><strong>Flux不好的一面</strong>就是每个人都需要重新发明它。至今依然没有一个事件库，模型层，AJAX功能层或者其他的任何功能，<a href=\"https://www.npmjs.org/package/compose-flux-dispatcher\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a> <a href=\"https://www.npmjs.org/package/flux-action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">有</a> <a href=\"https://www.npmjs.org/package/react-flux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一些</a> <a href=\"https://www.npmjs.org/package/fluxxor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不同</a>的“<a href=\"https://www.npmjs.org/package/reflux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux</a>”实现，但它们彼此之间完全不兼容（冲突）。</p>\n<h2 id=\"那么我该用react么？\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E4%B9%88%E6%88%91%E8%AF%A5%E7%94%A8react%E4%B9%88%EF%BC%9F\" aria-label=\"那么我该用react么？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那么我该用React么？</h2>\n<p>简单的回答：应该。</p>\n<p>较长的回答：不幸是，可以用，在大多数地方。</p>\n<p><strong>这里是为什么</strong>你应该使用React：</p>\n<ul>\n<li>对团队协作很有益，尤其是用户界面构建工作上（直译：大力实施UI和工作流模式）</li>\n<li>UI代码是易读且易维护的，组件化的用户界面是web开发的未来趋势，你需要现在开始做起来</li>\n</ul>\n<p>在你切换React前，<strong>你应慎重的再度思考如下问题</strong>：</p>\n<ul>\n<li>改用React，在最开始会极大地拖慢你的速度，理解属性、状态和组件之间的通信机制不是一件容易的事情，再加上官方文档那么烂。在你的整个团队都搞定前，理论上，这种情况将会持续下去。</li>\n<li>React不支持IE8及以下浏览器，未来也不会支持。</li>\n<li>如果你的程序/网站并没有非常多的动态页面更新，你将要为微小的提升编写大量的实现代码。</li>\n<li>你要重新发明许多轮子。React还年轻，还没有正式的事件/组件通信机制，你不得不从零开始，建立你的组件库。你的应用里有下拉菜单、更改窗口大小或者轮播（灯箱）效果么？你很可能不得不重新开始写这些功能了。</li>\n</ul>\n<h2 id=\"就是这些！\" style=\"position:relative;\"><a href=\"#%E5%B0%B1%E6%98%AF%E8%BF%99%E4%BA%9B%EF%BC%81\" aria-label=\"就是这些！ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>就是这些！</h2>\n<p>我的下面一篇文章<a href=\"http://blog.andrewray.me/flux-for-stupid-people/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">给新手（笨笨）准备的Flux介绍</a>。</p>\n<p>我希望这篇文章可以帮助一些向我一样笨的朋友更好的理解React。如果这篇文章能让你的生活更简单，那么在Twitter上follow我吧。</p>","fields":{"slug":"/posts/ReactJSForStupidPeople","tagSlugs":["/tag/react/","/tag/翻译/"]},"frontmatter":{"date":"2014-11-01","description":"我挣扎了很久，试图理解React是个啥，它整个的架构是个啥。这篇文章正好满足了我的这个愿望。","tags":["React","翻译"],"title":"给新手（笨笨）准备的ReactJS介绍","socialImage":null}}},"pageContext":{"slug":"/posts/ReactJSForStupidPeople"}}}