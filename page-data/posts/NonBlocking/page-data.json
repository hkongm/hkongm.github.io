{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/NonBlocking","result":{"data":{"markdownRemark":{"id":"e01bc970-eb68-5a7b-adc2-aa011abb4866","html":"<p><em>忙劲儿过去了，目前压力还好，今天抽空翻了一篇文章，表明我还活着～</em></p>\n<blockquote>\n<p>原文链接：<a href=\"http://keithclark.co.uk/articles/loading-css-without-blocking-render/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Loading CSS without blocking render</a></p>\n</blockquote>\n<p><strong>作者提示：当前，不要将此技巧用于产品化，主要是兼容性问题。</strong></p>\n<blockquote>\n<p>这篇文章介绍了一个“防止‘样式表加载行为导致页面渲染被阻塞’的异步加载样式表”的技术。</p>\n</blockquote>\n<p>这项技术的基本原则并不是新知识。例如Fliamentgroup发布过的<a href=\"https://github.com/filamentgroup/loadCSS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">loadCSS</a>和<a href=\"http://www.filamentgroup.com/lab/font-loading.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fonts</a>。我的这篇文章用来阐述我的<strong>如何实现非阻塞的加载资源</strong>的想法。</p>\n<!-- more -->\n<p>异步下载样式表这个技巧，源自于使用<code class=\"language-text\">&lt;link&gt;</code>元素的同时给他设置一个不合法的<code class=\"language-text\">media</code>属性（我自己在使用<code class=\"language-text\">media=&quot;none&quot;</code>，但其他的任何值都是可以的）的方法。当媒体查询判断这个值为假时，浏览器仍旧会下载样式表文件，但当整个页面加载渲染完毕时，这部分样式内容不会被应用到页面中。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>一旦，样式表被下载完成，<code class=\"language-text\">media</code>属性必须被设置为一个合法的值，这样页面才会应用这些样式定义。<code class=\"language-text\">onload</code>事件可以用来完成这项任务，将<code class=\"language-text\">media</code>属性设置为<code class=\"language-text\">all</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>if(media!='all')media='all'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>使用这种方法加载CSS，会比一般的方式更快速的为用户呈现出页面的内容。重要CSS仍然可以使用通常的阻塞加载方式（或者将这些样式使用inline的方式写在页面中以获得更好的性能表现），非重要的样式部分可以渐进下载，在稍后进行转换/渲染的过程。</p>\n<p>这项技术使用了Javascript，在不支持Javascript的浏览器中，你可以在外面套个<code class=\"language-text\">&lt;noscript&gt;</code>标签来实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>if(media!='all')media='all'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这项技术有个副作用。一旦无阻塞样式文件下载完成，文档中所有被影响的元素会进行重绘操作。在页面中插入新的样式会触发页面内容的重排操作。当页面第一次被加载时，这真的是个问题。你需要考虑到这种情况，对潜在的性能影响有个预判。</p>\n<h3 id=\"使用非阻塞css技术加载字体\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E9%9D%9E%E9%98%BB%E5%A1%9Ecss%E6%8A%80%E6%9C%AF%E5%8A%A0%E8%BD%BD%E5%AD%97%E4%BD%93\" aria-label=\"使用非阻塞css技术加载字体 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用非阻塞CSS技术加载字体</h3>\n<p>字体是个页面首次渲染的性能影响点，他们属于阻塞资源，并且当字体在下载时，浏览器已经在隐形（invisible）渲染他们了。使用上面介绍的无阻塞技术的话，让“在后台下载包含字体数据的样式表”这件事成为可能，实现非阻塞页面渲染：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>font.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>if(media!='all')media='all'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">font.css</code>包含了一套由base64编码的WOFF版本的<a href=\"http://www.google.com/fonts/specimen/Merriweather\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Merriweather</a>字体。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Merriweather<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> normal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Merriweather'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>'data:application/x-font-woff;charset=utf-8;base64,...'<span class=\"token punctuation\">)</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">main.css</code> 包含了站点所需要的所有样式规则。下面是关于字体的声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Merriweather<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lucida Grande\"</span><span class=\"token punctuation\">,</span> ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当<code class=\"language-text\">font.css</code>正在下载时，第一个匹配的fallback字体（在本例中是Lucida Grande）被用来渲染页面内容。当字体样式表下载完成并被应用时，才会使用Merriweather来渲染。注意：字体的变化会导致页面触发重排操作。</p>\n<p>3G网络下，我在Chrome中使用<a href=\"https://keithclark.github.io/gadebugger/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Analytics Debugger站点</a>进行阻塞和非阻塞方式的测试。结果显示，使用无阻塞方式的页面<code class=\"language-text\">DOMContentLoaded</code>事件的触发时间比使用传统阻塞方式的页面要快450ms：</p>\n<p><img src=\"/assets/nonblocking/non-blocking-vs-blocking-graph.png\"></p>\n<p><em>模拟3G网络下的瀑布图，上面为阻塞字体加载，下面为非阻塞字体加载</em></p>\n<p>将页面部署到线上，使用<a href=\"http://www.webpagetest.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webpagetest</a>测试3G连接的加载时间线如下：</p>\n<p><img src=\"/assets/nonblocking/non-blocking-vs-blocking-timeline1.png\"></p>\n<p><em>3G网络下的时间线，上面为阻塞字体加载，下面为非阻塞字体加载</em></p>\n<p>两种方法都在2.8秒内完成了整个页面，但非阻塞方法比传统阻塞方法提前1秒触发了页面渲染。我们把<code class=\"language-text\">main.css</code>的内容通过inline的方式写到页面中再次进行同一个测试，结果显示：我们获得了0.7秒的提升。</p>\n<p><img src=\"/assets/nonblocking/non-blocking-vs-blocking-timeline2.png\"></p>\n<p><em>3G网络下的时间线（主样式inline），上面为阻塞字体加载，下面为非阻塞字体加载</em></p>\n<p>这项技术不能很好的适应字体（译者注：作者指的是浏览器兼容性差），但我建议严密关注新的CSS字体加载模块，它会大幅提升字体加载性能。</p>\n<h3 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h3>\n<p>字体加载只是非阻塞加载技术的其中一个例子，该技术还可以应用到其他方面，比如从核心CSS中分离出Javascript增强样式。</p>","fields":{"slug":"/posts/NonBlocking","tagSlugs":["/tag/css/","/tag/翻译/"]},"frontmatter":{"date":"2015-04-13","description":"这篇文章介绍了一个“防止‘样式表加载行为导致页面渲染被阻塞’的异步加载样式表”的技术。","tags":["CSS","翻译"],"title":"非阻塞渲染加载CSS的技巧","socialImage":null}}},"pageContext":{"slug":"/posts/NonBlocking"}}}