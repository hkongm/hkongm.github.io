{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/ReactStyleTypes","result":{"data":{"markdownRemark":{"id":"15b5c711-4578-5b9c-8d0b-f68e9e5cc64d","html":"<p>如何给 React 组件应用样式，是个有争议性的话题。使用 JavaScript 将 CSS 内置的 <em>CSS in JS</em> 与传统的导入外置的 CSS 文件来应用样式，哪种方案才是最好的方法？两种方案一直存在着争议。</p>\n<p>在本文中，让我们看看这些方法的不同点，进而讨论它们的优缺点。文章的最后，你会对每种技术方案都有所了解，进而找到最适合你自己的方案并应用到你自己的项目中。</p>\n<h2 id=\"vanilla-css\" style=\"position:relative;\"><a href=\"#vanilla-css\" aria-label=\"vanilla css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vanilla CSS</h2>\n<p>先让我们尝试使用引用外置的 CSS 样式表文件的方式，当我们开发 React 应用时，会像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./box.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Box</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token string\">\"box-text\"</span><span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Box<span class=\"token punctuation\">;</span></code></pre></div>\n<p>样式部分由一个完全分离的 <code class=\"language-text\">box.css</code> 文件导入进来：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #f7f7f7<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.box-text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>构建工具会收集所引入的全部外置 CSS 文件，合并后最终链接到你的 HTML 文件中。（比如使用 <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-app</a> ）。</p>\n<h3 id=\"优点\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E7%82%B9\" aria-label=\"优点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h3>\n<p>因为是 Vanilla CSS ，所以你可以无限制地使用所有的 CSS 功能，比如：</p>\n<ul>\n<li>媒体查询（Media queries）</li>\n<li>帧动画（Keyframe animations）</li>\n<li>伪元素（Pseudo-elements）(eg. <code class=\"language-text\">:before</code>, <code class=\"language-text\">:after</code>)</li>\n<li>伪类（Pseudo-selectors）(eg. <code class=\"language-text\">:hover</code>, <code class=\"language-text\">:nth-child</code>)</li>\n</ul>\n<p>你正在使用纯 CSS，Web 页面结构中最最基础的一部分。这意味着，你不用在项目中添加任何的依赖。你同时也不用担心 CSS 部分在不远的将来将会淘汰，就像本文下面介绍的那些方案。</p>\n<p>如果你喜欢，你还可以使用你喜爱的 CSS 预处理器，比如 Sass 或者 Stylus，这些预处理器可以为你提供更强大的诸如 mixins、变量等高级功能，只要在构建过程中稍微添加下配置即可。</p>\n<h3 id=\"缺点\" style=\"position:relative;\"><a href=\"#%E7%BC%BA%E7%82%B9\" aria-label=\"缺点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h3>\n<p>首先，你需要确认你的构建过程可以识别 CSS 的引用。幸运的是，如果你正在使用 <code class=\"language-text\">create-react-app</code>，这部分功能已经\b集成完备了。</p>\n<p>另一方面，与下面其他几种方案相比，Vanilla CSS 方案无法使用 JavaScript 基于组件变量和属性来直接定制样式。这种样式方案，你需要采取一个\b别扭的方法（比如条件语句）来应用不同的样式类，比如下面的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> classNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>large<span class=\"token punctuation\">)</span> classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button-large\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>rounded<span class=\"token punctuation\">)</span> classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button-rounded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">button-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classNames<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这个示例中，我不得不添加了一些条件来更改组件的 <code class=\"language-text\">className</code> 属性，再通过 prop 传入组件。稍后我们还要回来看下这个例子，演示下相对于其他 React 样式方案，本例还可以是什么样。</p>\n<p>但最重要的问题是，CSS 本身不是\b基于组件架构而设计的。CSS 是基于页面文档和 Web 页来设计的，在这些环境下，CSS 的全局命名空间和层叠书写方式（cascade）是\b\b有力的工具。但在基于组件化的应用中，全局命名空间反而成了累赘和经常发生问题的地方。</p>\n<p>在 React 应用程序中直接使用 CSS 文件的这种方式，会让我们遇到诸如类名冲突、样式错乱等问题，都可以归咎于全局样式污染。使用 <a href=\"http://getbem.com/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BEM</a> 命名方案，可以一定程度上缓解这种问题，但你还是无法保证第三方的（样式）代码不会影响你自己的样式。</p>\n<p>更好的解决方案是可以直接作用于组件内的样式。这不仅可以解决全局命名空间问题，而且可以让开发者专注于组件，进而让我们可以干净整齐地打包样式代码，不必担心影响到其他组件。</p>\n<p>（译者注：原文下方评论区有人提到了 <a href=\"https://www.npmjs.com/package/classnames\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">classnames</a> 包来处理 \b<code class=\"language-text\">className</code>，作者也做了相应解释）</p>\n<h2 id=\"inline-styles\" style=\"position:relative;\"><a href=\"#inline-styles\" aria-label=\"inline styles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inline styles</h2>\n<p>下一个赋予 React 组件样式的方式是使用 Inline styles。</p>\n<p>在组件中，通过 <code class=\"language-text\">style</code> 属性，传入使用驼峰风格的 JavasScript 代码设置好的样式规则，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> boxStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  border<span class=\"token operator\">:</span> <span class=\"token string\">\"1px solid #f7f7f7\"</span><span class=\"token punctuation\">,</span>\n  borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">\"5px\"</span><span class=\"token punctuation\">,</span>\n  padding<span class=\"token operator\">:</span> <span class=\"token string\">\"20px\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> boxTextStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  fontSize<span class=\"token operator\">:</span> <span class=\"token string\">\"15px\"</span><span class=\"token punctuation\">,</span>\n  textAlign<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Box</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>boxStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>boxTextStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Box<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"优点-1\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E7%82%B9-1\" aria-label=\"优点 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h3>\n<p>这种方式的优点是，你不需要任何额外的依赖和构建步骤，你仅仅就是在用 React。这种方式可以最快速的开始项目，更适合小项目或者可以表现作者的意图的示例代码（\b小 Demo）。你的样式声明仅在组件内部，所以不用担心全局样式污染或者层级错误导致的问题。</p>\n<p>因为使用 Javascript，我们便可以加入一些功能和\b逻辑到我们的样式中。尝试用 inline styles 这种新的方式改写上面一段 Vanilla CSS 版本的按钮例子，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">styles</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  fontSize<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>large <span class=\"token operator\">?</span> <span class=\"token string\">\"20px\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"14px\"</span><span class=\"token punctuation\">,</span>\n  borderRadius<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>rounded <span class=\"token operator\">?</span> <span class=\"token string\">\"10px\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>\n  background<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">styles</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>你可以看到，这个版本比上一个纯 CSS 版本更具描述性，而不是\b类似循环的一步步应用某些样式，所需要的样式可以直接作用于组件。</p>\n<h3 id=\"缺点-1\" style=\"position:relative;\"><a href=\"#%E7%BC%BA%E7%82%B9-1\" aria-label=\"缺点 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h3>\n<p>在实际项目中，我是不会推荐使用 inline styles 方式的。这是因为通过 JS 来实现 CSS ，会使我们失去许多 CSS 最好用最强大的部分：</p>\n<ul>\n<li>我们无法做到媒体查询</li>\n<li>我们失去了帧动画功能</li>\n<li>我们失去了伪元素功能（比如 :before, :after），你不得不把这些内容写到你的 JSX 中</li>\n<li>我们失去了伪类功能（比如 :hover, :nth-child），你需要使用 <code class=\"language-text\">mouseover</code> 和 <code class=\"language-text\">mouseleave</code> 事件来模拟 <code class=\"language-text\">:hover</code> 行为</li>\n</ul>\n<p>缺失任何一个重点都有可能是严重的问题，而且你还会失去在构建步骤中转换 CSS 的\b福利，比如自动添加厂商前缀的功能。主观地将，这方案让人感觉到笨拙且不爽。</p>\n<h2 id=\"css-modules\" style=\"position:relative;\"><a href=\"#css-modules\" aria-label=\"css modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Modules</h2>\n<p>下一个方案，让我们来关注 <a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modules</a>。CSS Modules \b就像是第一个 Vanilla CSS 方案的改进型，其将所有的类与动画名都固定在自己的作用域内。这意味着，你完全可以规避全局命名空间导致的那些问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">\"./box.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Box</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>boxText<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Box<span class=\"token punctuation\">;</span></code></pre></div>\n<p>你引入了一个 <code class=\"language-text\">box.css</code> 外部文件，就像上面第一个 Vanilla CSS 方案一样。\u001d但这一次的引入，我们给他赋予了 <code class=\"language-text\">styles</code> 名字，此模块名作为一个属性 key 在组件中的 <code class=\"language-text\">className</code> 处使用，用以应用不同的类名。而引入的 CSS 文件就是一个普通的样式文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #f7f7f7<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.boxText</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"优点-2\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E7%82%B9-2\" aria-label=\"优点 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h3>\n<p>CSS Modules 更改了 CSS 文件中的类名并将他们变为了唯一名，这样将有效的将样式作用域化，\b使它们更适合\b基于组件的 Web 应用开发。CSS Modules 的使用，在保持了 Vanilla CSS 方案所有优点的同时，更帮助我们完全地规避了最大的（全局命名空间）问题。你仍旧可以完全控制 CSS 文件中所有的内容，而且还可以进一步的使用 CSS 预处理器（这需要升级构建步骤来支持）。</p>\n<p>因为你的代码库内仍然包含若干纯 CSS 文件，所以哪怕是添加构建步骤，并小幅度地更改导入和应用样式的方式，对项目代码的修改量也不大。这意味着如果你将来需要抛弃 CSS Modules 方式，这种过渡也是影响最小的。</p>\n<h3 id=\"缺点-2\" style=\"position:relative;\"><a href=\"#%E7%BC%BA%E7%82%B9-2\" aria-label=\"缺点 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h3>\n<p>CSS modules 使用作用域类解决了全局 CSS 的问题，但是它还是没有解决纯 CSS 所遇到的同样的问题。</p>\n<ul>\n<li>你需要设置你的构建步骤来支持 CSS modules （如果你同时还在使用 Sass / Stylus）。<code class=\"language-text\">create-react-app</code> 已经支持了 CSS modules。</li>\n<li>像 CSS 一样，你无法通过 JavaScript 加入任何的逻辑判断</li>\n</ul>\n<h2 id=\"styled-components\" style=\"position:relative;\"><a href=\"#styled-components\" aria-label=\"styled components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Styled Components</h2>\n<p><a href=\"https://github.com/styled-components/styled-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Styled Components</a> 是一个用于  React 的 <strong>CSS in JS</strong> 库，它允许你在 JS 中添加本地组件范围的样式。但区别于 inline styles，styled components 最终会将 JavaScript 编译到 CSS 中。这个库使用 <a href=\"https://www.styled-components.com/docs/advanced#tagged-template-literals\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">template tag literal</a> 语法在组件中应用样式，就像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BoxWrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  border: 1px solid #f7f7f7;\n  border-radius: 5px;\n  padding: 20px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BoxText <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>p<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  border: 1px solid #f7f7f7;\n  border-radius: 5px;\n  padding: 20px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Box</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>BoxWrapper<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>BoxText<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BoxText<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BoxWrapper<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Box<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"优点-3\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E7%82%B9-3\" aria-label=\"优点 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h3>\n<p>因为最终 JavaScript 会转换成实际的 CSS，所以你可以在 styled components 中无限制的使用 CSS 任何能力。这包括媒体查询、伪元素、动画等等。相较于（第二种 Inline styles 方式）驼峰属性，我们使用的就是常规的样式写法，styled components 得以让你书写普通的 CSS，这对于熟悉 CSS 工程师来说，这种方式真的极易上手。</p>\n<p>因为我们在使用一种 CSS in JS 方案，\b所以我们可以使用 JavaScript 语言的全部特性，可基于传入属性（props）来应用不同的样式。组件的传入属性（props）实际上被组件的 <code class=\"language-text\">styled</code> 的调用，这点非常强大：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  font-size: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>large <span class=\"token operator\">?</span> <span class=\"token string\">\"18px\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"14px\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  border-radius: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>rounded <span class=\"token operator\">?</span> <span class=\"token string\">\"10px\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Button <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>与 Vanilla CSS 不同，样式与声明它们时创建的组件紧密相关，也解决了全局命名空间问题。</p>\n<p>如果你喜欢 Styled Components 这种方式，那么还有其他可选的实现方案，你可以查看 <a href=\"https://github.com/paypal/glamorous\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Glamorous</a>，看看你喜欢哪个。\n（译者注：Glamorous 已经停止维护了，作者已经转向了 <a href=\"https://emotion.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">emotion</a>）</p>\n<h3 id=\"缺点-3\" style=\"position:relative;\"><a href=\"#%E7%BC%BA%E7%82%B9-3\" aria-label=\"缺点 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h3>\n<p>使用 Styled Components 需要在你的项目中添加额外的依赖。CSS in JS 世界的变化实在是很快，可以遇见在不远的将来，很有可能会出现更好的库，使用 styled components 的同时，你已经给自己背负了技术债务。</p>\n<p>还有另外一件事，当新人加入团队时，你需要让他们加速赶上技术革新的进度。除此之外，考虑下我在文章开始时提到的辩论，为什么使用 CSS in JS 不是一个好主意？</p>\n<h2 id=\"css-in-js是一个好主意么？（is-css-in-js-a-good-idea）\" style=\"position:relative;\"><a href=\"#css-in-js%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A5%BD%E4%B8%BB%E6%84%8F%E4%B9%88%EF%BC%9F%EF%BC%88is-css-in-js-a-good-idea%EF%BC%89\" aria-label=\"css in js是一个好主意么？（is css in js a good idea） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS in JS是一个好主意么？（Is CSS in JS a good idea?）</h2>\n<p>在读过整篇\b文章后，你可能更倾向于使用 Styled Components 或者 CSS modules。Inline styles 对于大多数应用来说功能性不够，而且如果你还要 JS 路由的话 Styled Components 是个更好的选择。相反的，如果你倾向于传统的 CSS 方式，CSS Modules 给你一些 Vanilla CSS 无法实现的功能 - 像是作用域选择器。</p>\n<p>就像我在文章开头提到的那样，使用 CSS in JS 是一个相当有争议性的话题，Styled Components 和 CSS Modules 的选择，二者孰优孰劣的讨论超出了本文的范围，如果你关心这场辩论，请移步这里 <a href=\"https://medium.com/@gajus/stop-using-css-in-javascript-for-web-development-fa32fb873dcc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stop using CSS in JavaScript for web development</a>。记住，凡事都有两方面，本文只是探讨了 Styled Components 的一些优势。</p>\n<h2 id=\"结论（the-verdict）\" style=\"position:relative;\"><a href=\"#%E7%BB%93%E8%AE%BA%EF%BC%88the-verdict%EF%BC%89\" aria-label=\"结论（the verdict） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论（The Verdict）</h2>\n<p>本文目的是简要\b的介绍了几种为 React 组件设置样式的方法的关键不同点。所以，我没有深入每种方法探讨它们的细节，\b如果你偏爱其中某种方式，你完全可以自己去做更深入的研究。</p>\n<p>从现开始，在我自己的项目中，我准备应用 styled components 方案，我只是觉得这个方案提供更加灵活且更加符合组件化概念，使用它可以让我的代码尽可能的保持干净整洁。</p>\n<blockquote>\n<p>原文：<a href=\"https://www.bhnywl.com/blog/styling-react-components/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.bhnywl.com/blog/styling-react-components/</a></p>\n</blockquote>","fields":{"slug":"/posts/ReactStyleTypes","tagSlugs":["/tag/react/","/tag/css-modules/","/tag/styled-components/"]},"frontmatter":{"date":"2018-07-25","description":"如何给 React 组件应用样式，是个有争议性的话题。使用 JavaScript 将 CSS 内置的 *CSS in JS* 与传统的导入外置的 CSS 文件来应用样式，哪种方案才是最好的方法？两种方案一直存在着争议。在本文中，让我们看看这些方法的不同点，进而讨论它们的优缺点。文章的最后，你会对每种技术方案都有所了解，进而找到最适合你自己的方案并应用到你自己的项目中。","tags":["React","CSS Modules","Styled Components"],"title":"React 组件样式方案对比-CSS Modules & Styled Components","socialImage":null}}},"pageContext":{"slug":"/posts/ReactStyleTypes"}}}