<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[灯盏细辛 Blog]]></title><description><![CDATA[灯盏细辛 Blog]]></description><link>http://hkongm.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 29 May 2020 08:59:56 GMT</lastBuildDate><item><title><![CDATA[React 组件样式方案对比-CSS Modules & Styled Components]]></title><description><![CDATA[如何给 React 组件应用样式，是个有争议性的话题。使用 JavaScript 将 CSS 内置的 *CSS in JS* 与传统的导入外置的 CSS 文件来应用样式，哪种方案才是最好的方法？两种方案一直存在着争议。在本文中，让我们看看这些方法的不同点，进而讨论它们的优缺点。文章的最后，你会对每种技术方案都有所了解，进而找到最适合你自己的方案并应用到你自己的项目中。]]></description><link>http://hkongm.github.io//posts/ReactStyleTypes</link><guid isPermaLink="false">http://hkongm.github.io//posts/ReactStyleTypes</guid><pubDate>Wed, 25 Jul 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;如何给 React 组件应用样式，是个有争议性的话题。使用 JavaScript 将 CSS 内置的 &lt;em&gt;CSS in JS&lt;/em&gt; 与传统的导入外置的 CSS 文件来应用样式，哪种方案才是最好的方法？两种方案一直存在着争议。&lt;/p&gt;
&lt;p&gt;在本文中，让我们看看这些方法的不同点，进而讨论它们的优缺点。文章的最后，你会对每种技术方案都有所了解，进而找到最适合你自己的方案并应用到你自己的项目中。&lt;/p&gt;
&lt;h2 id=&quot;vanilla-css&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vanilla-css&quot; aria-label=&quot;vanilla css permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vanilla CSS&lt;/h2&gt;
&lt;p&gt;先让我们尝试使用引用外置的 CSS 样式表文件的方式，当我们开发 React 应用时，会像下面这样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./box.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;box-text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; World&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;样式部分由一个完全分离的 &lt;code class=&quot;language-text&quot;&gt;box.css&lt;/code&gt; 文件导入进来：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #f7f7f7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.box-text&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;构建工具会收集所引入的全部外置 CSS 文件，合并后最终链接到你的 HTML 文件中。（比如使用 &lt;a href=&quot;https://github.com/facebook/create-react-app&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;create-react-app&lt;/a&gt; ）。&lt;/p&gt;
&lt;h3 id=&quot;优点&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BC%98%E7%82%B9&quot; aria-label=&quot;优点 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;p&gt;因为是 Vanilla CSS ，所以你可以无限制地使用所有的 CSS 功能，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;媒体查询（Media queries）&lt;/li&gt;
&lt;li&gt;帧动画（Keyframe animations）&lt;/li&gt;
&lt;li&gt;伪元素（Pseudo-elements）(eg. &lt;code class=&quot;language-text&quot;&gt;:before&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:after&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;伪类（Pseudo-selectors）(eg. &lt;code class=&quot;language-text&quot;&gt;:hover&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;:nth-child&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你正在使用纯 CSS，Web 页面结构中最最基础的一部分。这意味着，你不用在项目中添加任何的依赖。你同时也不用担心 CSS 部分在不远的将来将会淘汰，就像本文下面介绍的那些方案。&lt;/p&gt;
&lt;p&gt;如果你喜欢，你还可以使用你喜爱的 CSS 预处理器，比如 Sass 或者 Stylus，这些预处理器可以为你提供更强大的诸如 mixins、变量等高级功能，只要在构建过程中稍微添加下配置即可。&lt;/p&gt;
&lt;h3 id=&quot;缺点&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BC%BA%E7%82%B9&quot; aria-label=&quot;缺点 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;p&gt;首先，你需要确认你的构建过程可以识别 CSS 的引用。幸运的是，如果你正在使用 &lt;code class=&quot;language-text&quot;&gt;create-react-app&lt;/code&gt;，这部分功能已经集成完备了。&lt;/p&gt;
&lt;p&gt;另一方面，与下面其他几种方案相比，Vanilla CSS 方案无法使用 JavaScript 基于组件变量和属性来直接定制样式。这种样式方案，你需要采取一个别扭的方法（比如条件语句）来应用不同的样式类，比如下面的例子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; classNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;large&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; classNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button-large&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rounded&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; classNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button-rounded&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; classNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;button-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;classNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个示例中，我不得不添加了一些条件来更改组件的 &lt;code class=&quot;language-text&quot;&gt;className&lt;/code&gt; 属性，再通过 prop 传入组件。稍后我们还要回来看下这个例子，演示下相对于其他 React 样式方案，本例还可以是什么样。&lt;/p&gt;
&lt;p&gt;但最重要的问题是，CSS 本身不是基于组件架构而设计的。CSS 是基于页面文档和 Web 页来设计的，在这些环境下，CSS 的全局命名空间和层叠书写方式（cascade）是有力的工具。但在基于组件化的应用中，全局命名空间反而成了累赘和经常发生问题的地方。&lt;/p&gt;
&lt;p&gt;在 React 应用程序中直接使用 CSS 文件的这种方式，会让我们遇到诸如类名冲突、样式错乱等问题，都可以归咎于全局样式污染。使用 &lt;a href=&quot;http://getbem.com/introduction/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;BEM&lt;/a&gt; 命名方案，可以一定程度上缓解这种问题，但你还是无法保证第三方的（样式）代码不会影响你自己的样式。&lt;/p&gt;
&lt;p&gt;更好的解决方案是可以直接作用于组件内的样式。这不仅可以解决全局命名空间问题，而且可以让开发者专注于组件，进而让我们可以干净整齐地打包样式代码，不必担心影响到其他组件。&lt;/p&gt;
&lt;p&gt;（译者注：原文下方评论区有人提到了 &lt;a href=&quot;https://www.npmjs.com/package/classnames&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;classnames&lt;/a&gt; 包来处理 &lt;code class=&quot;language-text&quot;&gt;className&lt;/code&gt;，作者也做了相应解释）&lt;/p&gt;
&lt;h2 id=&quot;inline-styles&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#inline-styles&quot; aria-label=&quot;inline styles permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inline styles&lt;/h2&gt;
&lt;p&gt;下一个赋予 React 组件样式的方式是使用 Inline styles。&lt;/p&gt;
&lt;p&gt;在组件中，通过 &lt;code class=&quot;language-text&quot;&gt;style&lt;/code&gt; 属性，传入使用驼峰风格的 JavasScript 代码设置好的样式规则，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; boxStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  border&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1px solid #f7f7f7&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  borderRadius&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  padding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;20px&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; boxTextStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  fontSize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;15px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  textAlign&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;center&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;boxStyle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;boxTextStyle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; World&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;优点-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BC%98%E7%82%B9-1&quot; aria-label=&quot;优点 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;p&gt;这种方式的优点是，你不需要任何额外的依赖和构建步骤，你仅仅就是在用 React。这种方式可以最快速的开始项目，更适合小项目或者可以表现作者的意图的示例代码（小 Demo）。你的样式声明仅在组件内部，所以不用担心全局样式污染或者层级错误导致的问题。&lt;/p&gt;
&lt;p&gt;因为使用 Javascript，我们便可以加入一些功能和逻辑到我们的样式中。尝试用 inline styles 这种新的方式改写上面一段 Vanilla CSS 版本的按钮例子，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  fontSize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;large &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;20px&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;14px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  borderRadius&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rounded &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10px&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  background&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以看到，这个版本比上一个纯 CSS 版本更具描述性，而不是类似循环的一步步应用某些样式，所需要的样式可以直接作用于组件。&lt;/p&gt;
&lt;h3 id=&quot;缺点-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BC%BA%E7%82%B9-1&quot; aria-label=&quot;缺点 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;p&gt;在实际项目中，我是不会推荐使用 inline styles 方式的。这是因为通过 JS 来实现 CSS ，会使我们失去许多 CSS 最好用最强大的部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们无法做到媒体查询&lt;/li&gt;
&lt;li&gt;我们失去了帧动画功能&lt;/li&gt;
&lt;li&gt;我们失去了伪元素功能（比如 :before, :after），你不得不把这些内容写到你的 JSX 中&lt;/li&gt;
&lt;li&gt;我们失去了伪类功能（比如 :hover, :nth-child），你需要使用 &lt;code class=&quot;language-text&quot;&gt;mouseover&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;mouseleave&lt;/code&gt; 事件来模拟 &lt;code class=&quot;language-text&quot;&gt;:hover&lt;/code&gt; 行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺失任何一个重点都有可能是严重的问题，而且你还会失去在构建步骤中转换 CSS 的福利，比如自动添加厂商前缀的功能。主观地将，这方案让人感觉到笨拙且不爽。&lt;/p&gt;
&lt;h2 id=&quot;css-modules&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css-modules&quot; aria-label=&quot;css modules permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS Modules&lt;/h2&gt;
&lt;p&gt;下一个方案，让我们来关注 &lt;a href=&quot;https://github.com/css-modules/css-modules&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;CSS Modules&lt;/a&gt;。CSS Modules 就像是第一个 Vanilla CSS 方案的改进型，其将所有的类与动画名都固定在自己的作用域内。这意味着，你完全可以规避全局命名空间导致的那些问题。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styles &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./box.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;boxText&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; World&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你引入了一个 &lt;code class=&quot;language-text&quot;&gt;box.css&lt;/code&gt; 外部文件，就像上面第一个 Vanilla CSS 方案一样。但这一次的引入，我们给他赋予了 &lt;code class=&quot;language-text&quot;&gt;styles&lt;/code&gt; 名字，此模块名作为一个属性 key 在组件中的 &lt;code class=&quot;language-text&quot;&gt;className&lt;/code&gt; 处使用，用以应用不同的类名。而引入的 CSS 文件就是一个普通的样式文件。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.box&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #f7f7f7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.boxText&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;优点-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BC%98%E7%82%B9-2&quot; aria-label=&quot;优点 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;p&gt;CSS Modules 更改了 CSS 文件中的类名并将他们变为了唯一名，这样将有效的将样式作用域化，使它们更适合基于组件的 Web 应用开发。CSS Modules 的使用，在保持了 Vanilla CSS 方案所有优点的同时，更帮助我们完全地规避了最大的（全局命名空间）问题。你仍旧可以完全控制 CSS 文件中所有的内容，而且还可以进一步的使用 CSS 预处理器（这需要升级构建步骤来支持）。&lt;/p&gt;
&lt;p&gt;因为你的代码库内仍然包含若干纯 CSS 文件，所以哪怕是添加构建步骤，并小幅度地更改导入和应用样式的方式，对项目代码的修改量也不大。这意味着如果你将来需要抛弃 CSS Modules 方式，这种过渡也是影响最小的。&lt;/p&gt;
&lt;h3 id=&quot;缺点-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BC%BA%E7%82%B9-2&quot; aria-label=&quot;缺点 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;p&gt;CSS modules 使用作用域类解决了全局 CSS 的问题，但是它还是没有解决纯 CSS 所遇到的同样的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你需要设置你的构建步骤来支持 CSS modules （如果你同时还在使用 Sass / Stylus）。&lt;code class=&quot;language-text&quot;&gt;create-react-app&lt;/code&gt; 已经支持了 CSS modules。&lt;/li&gt;
&lt;li&gt;像 CSS 一样，你无法通过 JavaScript 加入任何的逻辑判断&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;styled-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#styled-components&quot; aria-label=&quot;styled components permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Styled Components&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/styled-components/styled-components&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Styled Components&lt;/a&gt; 是一个用于  React 的 &lt;strong&gt;CSS in JS&lt;/strong&gt; 库，它允许你在 JS 中添加本地组件范围的样式。但区别于 inline styles，styled components 最终会将 JavaScript 编译到 CSS 中。这个库使用 &lt;a href=&quot;https://www.styled-components.com/docs/advanced#tagged-template-literals&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;template tag literal&lt;/a&gt; 语法在组件中应用样式，就像下面这样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;styled-components&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; BoxWrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  border: 1px solid #f7f7f7;
  border-radius: 5px;
  padding: 20px;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; BoxText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;p&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  border: 1px solid #f7f7f7;
  border-radius: 5px;
  padding: 20px;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BoxWrapper&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BoxText&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; World&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;BoxText&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;BoxWrapper&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;优点-3&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BC%98%E7%82%B9-3&quot; aria-label=&quot;优点 3 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;p&gt;因为最终 JavaScript 会转换成实际的 CSS，所以你可以在 styled components 中无限制的使用 CSS 任何能力。这包括媒体查询、伪元素、动画等等。相较于（第二种 Inline styles 方式）驼峰属性，我们使用的就是常规的样式写法，styled components 得以让你书写普通的 CSS，这对于熟悉 CSS 工程师来说，这种方式真的极易上手。&lt;/p&gt;
&lt;p&gt;因为我们在使用一种 CSS in JS 方案，所以我们可以使用 JavaScript 语言的全部特性，可基于传入属性（props）来应用不同的样式。组件的传入属性（props）实际上被组件的 &lt;code class=&quot;language-text&quot;&gt;styled&lt;/code&gt; 的调用，这点非常强大：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;styled-components&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Button &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;button&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  background: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;
  font-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;large &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;18px&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;14px&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;
  border-radius: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rounded &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10px&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与 Vanilla CSS 不同，样式与声明它们时创建的组件紧密相关，也解决了全局命名空间问题。&lt;/p&gt;
&lt;p&gt;如果你喜欢 Styled Components 这种方式，那么还有其他可选的实现方案，你可以查看 &lt;a href=&quot;https://github.com/paypal/glamorous&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Glamorous&lt;/a&gt;，看看你喜欢哪个。
（译者注：Glamorous 已经停止维护了，作者已经转向了 &lt;a href=&quot;https://emotion.sh&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;emotion&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id=&quot;缺点-3&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BC%BA%E7%82%B9-3&quot; aria-label=&quot;缺点 3 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;p&gt;使用 Styled Components 需要在你的项目中添加额外的依赖。CSS in JS 世界的变化实在是很快，可以遇见在不远的将来，很有可能会出现更好的库，使用 styled components 的同时，你已经给自己背负了技术债务。&lt;/p&gt;
&lt;p&gt;还有另外一件事，当新人加入团队时，你需要让他们加速赶上技术革新的进度。除此之外，考虑下我在文章开始时提到的辩论，为什么使用 CSS in JS 不是一个好主意？&lt;/p&gt;
&lt;h2 id=&quot;css-in-js是一个好主意么？（is-css-in-js-a-good-idea）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css-in-js%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A5%BD%E4%B8%BB%E6%84%8F%E4%B9%88%EF%BC%9F%EF%BC%88is-css-in-js-a-good-idea%EF%BC%89&quot; aria-label=&quot;css in js是一个好主意么？（is css in js a good idea） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS in JS是一个好主意么？（Is CSS in JS a good idea?）&lt;/h2&gt;
&lt;p&gt;在读过整篇文章后，你可能更倾向于使用 Styled Components 或者 CSS modules。Inline styles 对于大多数应用来说功能性不够，而且如果你还要 JS 路由的话 Styled Components 是个更好的选择。相反的，如果你倾向于传统的 CSS 方式，CSS Modules 给你一些 Vanilla CSS 无法实现的功能 - 像是作用域选择器。&lt;/p&gt;
&lt;p&gt;就像我在文章开头提到的那样，使用 CSS in JS 是一个相当有争议性的话题，Styled Components 和 CSS Modules 的选择，二者孰优孰劣的讨论超出了本文的范围，如果你关心这场辩论，请移步这里 &lt;a href=&quot;https://medium.com/@gajus/stop-using-css-in-javascript-for-web-development-fa32fb873dcc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Stop using CSS in JavaScript for web development&lt;/a&gt;。记住，凡事都有两方面，本文只是探讨了 Styled Components 的一些优势。&lt;/p&gt;
&lt;h2 id=&quot;结论（the-verdict）&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BB%93%E8%AE%BA%EF%BC%88the-verdict%EF%BC%89&quot; aria-label=&quot;结论（the verdict） permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;结论（The Verdict）&lt;/h2&gt;
&lt;p&gt;本文目的是简要的介绍了几种为 React 组件设置样式的方法的关键不同点。所以，我没有深入每种方法探讨它们的细节，如果你偏爱其中某种方式，你完全可以自己去做更深入的研究。&lt;/p&gt;
&lt;p&gt;从现开始，在我自己的项目中，我准备应用 styled components 方案，我只是觉得这个方案提供更加灵活且更加符合组件化概念，使用它可以让我的代码尽可能的保持干净整洁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://www.bhnywl.com/blog/styling-react-components/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.bhnywl.com/blog/styling-react-components/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[PointerEvent 来了]]></title><description><![CDATA[今天看了下搁置好久的 github 通知，watching 的 Zepto 通知中有这么一条。tap double trigger on chrome 55。其中大意是说在 Chrome55 中，Double Tap 事件异常。下面的 @mbyor（不知道为啥这家伙才注册11天？小号也不可能啊）给了个比较满意的解答，而且很详尽，改你的 touch module 就行啦，blabla。]]></description><link>http://hkongm.github.io//posts/PointerEvent</link><guid isPermaLink="false">http://hkongm.github.io//posts/PointerEvent</guid><pubDate>Wed, 11 Jan 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今天看了下搁置好久的 github 通知，watching 的 Zepto 通知中有这么一条。&lt;a href=&quot;https://github.com/madrobby/zepto/issues/1249&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tap double trigger on chrome 55&lt;/a&gt;。其中大意是说在 Chrome55 中，&lt;code class=&quot;language-text&quot;&gt;Double Tap&lt;/code&gt; 事件异常。下面的 &lt;a href=&quot;https://github.com/mbyor&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;@mbyor&lt;/a&gt; （不知道为啥这家伙才注册11天？小号也不可能啊）给了个比较满意的解答，而且很详尽，改你的 &lt;code class=&quot;language-text&quot;&gt;touch module&lt;/code&gt; 就行啦，blabla。&lt;/p&gt;
&lt;p&gt;其中提到了 &lt;code class=&quot;language-text&quot;&gt;pointerdown&lt;/code&gt; 这个事件，这是啥？貌似之前在哪儿听说过，但是没细研究过，马上 Chrome 打开 Console 输入以下代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;monitorEvents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pointerdown&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后鼠标点了下页面，嘿！有东西出来了啊：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;pointerdown PointerEvent &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isTrusted&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pointerId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pressure&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;…&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回去 issue ，顺藤摸瓜，搭梯子访问了下 &lt;a href=&quot;https://developers.google.com/web/updates/2016/10/pointer-events&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developers.google.com/web/updates/2016/10/pointer-events&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;里面介绍了这次的主角 &lt;code class=&quot;language-text&quot;&gt;PointerEvent&lt;/code&gt; 的由来：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve had touch events for a while to help us with that, but they’re an entirely separate API specifically for touch, forcing you to code two separate event models if you want to support both mouse and touch. Chrome 55 ships with a newer standard that unifies both models: pointer events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大意就是我们很早以前就支持 touch 事件啦，但是后来发现开发者们为了兼容 PC 和 M 经常要监听同类型的两个事件以应付鼠标和触屏的触摸，所以呢，这次我们实现了 &lt;code class=&quot;language-text&quot;&gt;PointerEvent&lt;/code&gt; 标准，来解救你们来啦。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;mousedown&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;touchstart&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次这么写是不是挺恶心的？以后直接监听 &lt;code class=&quot;language-text&quot;&gt;pointerdown&lt;/code&gt; 就行啦～而且这次的 Pointer 事件比 Mouse 和 Touch 设计的更精细、全面，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pointerover The pointer has entered the bounding box of the element. This happens immediately for devices that support hover, or before a pointerdown event for devices that do not.&lt;/li&gt;
&lt;li&gt;pointerenter  Similar to pointerover, but does not bubble and handles descendants differently. Details on the spec.&lt;/li&gt;
&lt;li&gt;pointerdown The pointer has entered the active button state, with either a button being pressed or contact being established, depending on the semantics of the input device.&lt;/li&gt;
&lt;li&gt;pointermove The pointer has changed position.&lt;/li&gt;
&lt;li&gt;pointerup The pointer has left the active button state.&lt;/li&gt;
&lt;li&gt;pointercancel Something has happened that means it’s unlikely the pointer will emit any more events. This means you should cancel any in-progress actions and go back to a neutral input state.&lt;/li&gt;
&lt;li&gt;pointerout  The pointer has left the bounding box of the element or screen. Also after a pointerup, if the device does not support hover.&lt;/li&gt;
&lt;li&gt;pointerleave  Similar to pointerout, but does not bubble and handles descendants differently. Details on the spec.&lt;/li&gt;
&lt;li&gt;gotpointercapture Element has received pointer capture.&lt;/li&gt;
&lt;li&gt;lostpointercapture  Pointer which was being captured has been released.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;够用了吧？期待不久的将来（为什么是将来？因为标准普及到浏览器需要时间，值得庆幸的是，普及的时间越来越短了），我们能全面用上 Pointer 事件，告别事件绑定的尴尬境地。&lt;/p&gt;
&lt;p&gt;新年来了，想说些啥，也实在不知道说啥，公司还好，团队还好，业务尚可，明年可以期待可以上更多的新技术，机会越来越多需要抓住。&lt;/p&gt;
&lt;p&gt;在年前做个总结会吧，总结&amp;#x26;激励&amp;#x26;愿景，邀请其他部门的老大们过来听听，要不是UI老大想找我听听FE团队的总结，还真没重视这个事儿。&lt;/p&gt;
&lt;p&gt;Vue看了一段时间，基本上算是会用了，也做了一些用得到Vuex，10个组件左右的不算复杂的小App，也都是练手学习用的，不过始终停留在如何使用上，还没细看过API里面的实现，怀疑自己是否会去看，心态有点变了呢。&lt;/p&gt;
&lt;p&gt;今天就这样了，祝大家新年快乐，万事顺意，身体健康！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[面试，我们面什么？（下）]]></title><description><![CDATA[上次提到面试时，我们面什么，讲了能力、态度、沟通。这次讲讲怎么看潜力。]]></description><link>http://hkongm.github.io//posts/InterviewTalkB</link><guid isPermaLink="false">http://hkongm.github.io//posts/InterviewTalkB</guid><pubDate>Fri, 18 Nov 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;上次提到面试时，我们面什么，讲了能力、态度、沟通。这次讲讲怎么看潜力。&lt;/p&gt;
&lt;p&gt;潜力是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;潜在能力指个人能力发展的可能性，这种可能性在外部环境或教育条件许可时，可以通过一定的经验发展成为现实能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在前端技术这边，潜力就是在短短的几个月内，能突飞猛进到什么程度？这真的能看出来么？&lt;/p&gt;
&lt;h3 id=&quot;年纪&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B9%B4%E7%BA%AA&quot; aria-label=&quot;年纪 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;年纪&lt;/h3&gt;
&lt;p&gt;你岁数小，就有无限可能！两个能力基本相当的人，一个刚毕业，一个已经经验3年，一目了然应届生潜力会很大。当然，要在一个合适的体系内，需要一个好的老师来带。&lt;/p&gt;
&lt;h3 id=&quot;学习能力。&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%AD%A6%E4%B9%A0%E8%83%BD%E5%8A%9B%E3%80%82&quot; aria-label=&quot;学习能力。 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;学习能力。&lt;/h3&gt;
&lt;p&gt;我经常会问，你了解到的前端领域最新技术是什么，这个答案可以直接判断出应聘者的学习和接受能力。有些人（时至今日）会回答：“SASS”；而有些人会回答：“redux”，这两个人，孰优孰劣显而易见。当然，这要求面试官自己也要通宵最新的技术，就怕人家回答出个东西自己不知道，就糗大了。千万不要问 &lt;code class=&quot;language-text&quot;&gt;Crosswalk&lt;/code&gt; 这种，因为基本上没人知道是啥，别浪费时间。&lt;/p&gt;
&lt;p&gt;关于学习能力，还有一个可以考察的点，就是实战技术以外的范围，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己倒腾博客的：最次的在博客园注册个账号，稍好一点的是挂在 &lt;code class=&quot;language-text&quot;&gt;github.io&lt;/code&gt; 上的，更好的就是 &lt;code class=&quot;language-text&quot;&gt;hexo&lt;/code&gt; 或者 &lt;code class=&quot;language-text&quot;&gt;jekyll&lt;/code&gt; 建设，自己有域名的并且持续（这很重要）维护很久的。（像我这个博客就是个反例哈哈哈哈）&lt;/li&gt;
&lt;li&gt;探索的能力：自己发现新鲜玩意儿的，经常没事就 explore github 的，有 github 账号且下面有 Repo，Star 上几十个的。这就是个有折腾精神的孩子，很稀缺的品质。&lt;/li&gt;
&lt;li&gt;英语阅读能力：经常翻第一手的英文技术资料的，偶尔还会自己翻译些技术文档的。比上面一条还要稀缺。&lt;/li&gt;
&lt;li&gt;自我驱动能力：这个酒比较复杂了，需要在工作中长期考察了，比上面几条更难寻觅的超强品质！人最难的是“坚持”。我这就有个孩子，一年多了，从没停止过学习，刻苦钻研，技术进步速度远超其他人，但这种人相对也有缺点，缺点不在本文范围内，就不赘述了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;视野&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%A7%86%E9%87%8E&quot; aria-label=&quot;视野 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;视野&lt;/h3&gt;
&lt;p&gt;承接上面的学习能力，学习能力强，怎么体现？就是技术视野咯。技术好的应聘者，我会问些业界最前沿的技术，即便我自己也不太清楚里面的实现，考查点在应聘者是否&lt;strong&gt;知道&lt;/strong&gt;，而不是是否&lt;strong&gt;通晓&lt;/strong&gt;。刚才说的是新技术，（全部或者部分）永不过时的老技术也可以问问啊，比如 &lt;code class=&quot;language-text&quot;&gt;Yslow&lt;/code&gt; ，现在的年轻人几乎都不知道这个，当初的前端性能优化军规，虽然现在有些条款不合时宜，但还是精髓无比的。再饮用下自己的名言吧：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;视野决定终点。by caichao&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;软实力&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%BD%AF%E5%AE%9E%E5%8A%9B&quot; aria-label=&quot;软实力 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;软实力&lt;/h3&gt;
&lt;p&gt;软实力为何？我理解，就是不会直接影响工作成果的，额外的优秀品质，比如魅力出众，不是美女那种哦，是刘备曹操那种。比如思维敏捷，见解独到。还比如口若悬河，滔滔不绝，能（有理有据地）打胜（口）仗。&lt;/p&gt;
&lt;p&gt;软实力还包括，是否懂得后端语言？是否懂产品设计？是否懂UX/UI？甚至数据库运维？当然这些你都略懂，而且专业技术上过关能带人的级别，那么至少应该是个入门M了。或者以P的身份进公司，稍作锻炼可以走M线。这种人不走M线就是屈才啊！要知道，能完成工作的人不难找，但是能摆平各方阻力让下属舒舒服服干活儿的人，凤毛麟角。&lt;/p&gt;
&lt;p&gt;说到后面可能有点跑题，总之呢，就是，潜力，在面试中是绝对可以考察出来的。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[面试，我们面什么？（上）]]></title><description><![CDATA[以面试官的角度，讲讲，前端面试，我面什么。简单归纳几点：能力、态度、沟通、潜力]]></description><link>http://hkongm.github.io//posts/InterviewTalkA</link><guid isPermaLink="false">http://hkongm.github.io//posts/InterviewTalkA</guid><pubDate>Wed, 16 Nov 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;以面试官的角度，讲讲，前端面试，我面什么。&lt;/p&gt;
&lt;p&gt;简单归纳几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能力&lt;/li&gt;
&lt;li&gt;态度&lt;/li&gt;
&lt;li&gt;沟通&lt;/li&gt;
&lt;li&gt;潜力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面分开讲下。&lt;/p&gt;
&lt;h3 id=&quot;能力&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%83%BD%E5%8A%9B&quot; aria-label=&quot;能力 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;能力&lt;/h3&gt;
&lt;p&gt;这里的能力，指的是技术能力，是硬实力。有几点可以提现你的能力：&lt;/p&gt;
&lt;p&gt;首先，就是工作经验，先看简历上的工作时间，可以大致推断出这个人的能力，基本上是成正比的，能力强的人，必然是经历了大量的实际工作历练的，反之则不一定。&lt;/p&gt;
&lt;p&gt;其次，现在我的面试已经取消了笔试环节，因为笔试嘛，整个过程没有监考老师，即便公司不提供公共WIFI，3/4G网络这么发达，随便度一下，答案也就出来了。（当初一道笔试题，问CORS是啥，结果面试者把百度出来的关于卫星那套都抄上去了，我的天！）所以，现在面试时会出面对面现场出大量的“笔试”题，当场用笔在A4纸上写出答案。这对成天使用IDE的同学是算是个小（有些人也很要命）的挑战，成天在用，但是脱离了tips，你还能写出来么？SSH到服务器上只有VI，这时你怎么办？开手机百度？机房屏蔽呢？出来百度？&lt;/p&gt;
&lt;p&gt;其他公司可能不一样，我这边是，60%的题你要都能答对，几本就过了技术面试，而不是100%全对才行（因为工作中不会100%全用上），没有人能全部答对的，所以应聘者发现自己正确率不高就觉得自己没戏了，其实也不一定哦。&lt;/p&gt;
&lt;p&gt;最后，假定你的能力可以，还要看机缘，目前缺人的职位是不是适合你，够不够fit。&lt;/p&gt;
&lt;p&gt;举个例子，设计部专题组，需要应聘者手速快，大量切页面的经验，要求你半天出一个复杂专题页。此时的你，上家单位司职JSer，页面几乎很少碰，那么基本上能力强也不能要，因为啥，干不了活儿啊。我司设计部目前就是这个情况啊。&lt;/p&gt;
&lt;p&gt;再比如，我这个团队，是需要全能人才，CSS3你要懂要写，JS基础要好，框架不框架的其实无所谓，因为你来了也不是写 &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt; 的，CLI工具稍微培训个半小时就能上手了。交给你一条产品线，你要能挑得起来才行，应聘者是这样，经常JS不错，一提CSS就完蛋，我也不敢要，我一直以为JS好学，只要你是科班出身，学过几本的编程，语言这东西都是触类旁通的，只不过看看DOM BOM API就行了。唯独，页面结构样式，这部分才是很见功力，尤其是多人在维护的项目中，很难说怎么就好的能模块化起来。&lt;/p&gt;
&lt;h3 id=&quot;态度&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%80%81%E5%BA%A6&quot; aria-label=&quot;态度 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;态度&lt;/h3&gt;
&lt;p&gt;简历的真实性，简历都不是100%真实的，面试中，几个问题就能问出注水比例，而这个比例越高，越能说明你态度不端正。也不排除有些应聘者，开始会交代清楚，我的简历一些是虚假的，就是为了赢得一次面试机会，这种情况，会往回拉拉分。&lt;/p&gt;
&lt;p&gt;面试中，态度体现得其实也不怎么明显，大多数人会装作自己很小心，很谦虚。&lt;/p&gt;
&lt;p&gt;到面试的最后提问（是应聘者向面试官）环节，对自己没信心的，会说“反正我也过不了，没有问题”。这么回答的话，那就真的一点希望都没了。&lt;/p&gt;
&lt;p&gt;当面试官让你提问时，你可以提几个事先准备好的问题，好体现出&lt;strong&gt;我很珍惜这次面试机会&lt;/strong&gt;，&lt;strong&gt;我很想来咱们公司&lt;/strong&gt;，&lt;strong&gt;工资不重要，我想稳定下来好好学习&lt;/strong&gt;，这些关键点。&lt;/p&gt;
&lt;p&gt;只要你能表现出自己的虚心并很向往有效地学习的想法，一般都会给自己在面试官那里增加点印象分的，可以说，这分是最好拿的分，可是大部分面试者都不知道哦。&lt;/p&gt;
&lt;p&gt;更多信息，会在下期，第四部分&lt;strong&gt;潜力&lt;/strong&gt;中细说。&lt;/p&gt;
&lt;h3 id=&quot;沟通&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%B2%9F%E9%80%9A&quot; aria-label=&quot;沟通 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;沟通&lt;/h3&gt;
&lt;p&gt;会不会说话，怎么说话，说什么话，好有学问哦。&lt;/p&gt;
&lt;p&gt;面试时能靠查出么？当然能。能否用简单两句话把原理讲明白。尤其是开放性问题时，怎么表达自己的观点，语速的快慢，断句的时间点，甚至有时候的反问，都能反应出你沟通能力如何。&lt;/p&gt;
&lt;p&gt;让面试官心情愉悦的同时，表达自己的优势，又不能喧宾夺主，自信而又谦虚。&lt;/p&gt;
&lt;p&gt;面试期间，10-100分钟都有可能，短短的时间内，沟通能力也只能看个大概和方向，其实这里是HR的专场，我也不能说太多了。&lt;/p&gt;
&lt;h3 id=&quot;潜力&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%BD%9C%E5%8A%9B&quot; aria-label=&quot;潜力 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;潜力&lt;/h3&gt;
&lt;p&gt;潜力，这节是重头戏，先开个头，下次补上吧。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[突然发现自己学会思考了]]></title><description><![CDATA[标题其实也可以这么起《多角度的思考问题》，今天突然发觉自己思考问题的方式不想当初那么单线程了，貌似真的领悟了什么叫作「辩证的看问题」了，也不知道我到了如今这个年纪才明白这些是不是已经晚了，或者算是挺早的，特此记录下来，分享给大家。]]></description><link>http://hkongm.github.io//posts/thinkingnewway</link><guid isPermaLink="false">http://hkongm.github.io//posts/thinkingnewway</guid><pubDate>Mon, 26 Sep 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;标题其实也可以这么起《多角度的思考问题》，今天突然发觉自己思考问题的方式不想当初那么单线程了，貌似真的领悟了什么叫作「辩证的看问题」了，也不知道我到了如今这个年纪才明白这些是不是已经晚了，或者算是挺早的，特此记录下来，分享给大家。&lt;/p&gt;
&lt;p&gt;对于同一件事，不同的人有不同的看法，（可能是）大部分人会被舆论牵着走，或者干脆顺着事件本身的思路延展下去。所以，媒体啊、舆论啊会对公众思想产生较大的影响，就比如这两天挺热闹的，郭德纲曹云金对撕这件事。&lt;/p&gt;
&lt;p&gt;微信群里有人表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他们俩谁发文了，我就支持谁，摇摆不定，我觉得他们说得都有道理啊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是典型的例子了。&lt;/p&gt;
&lt;p&gt;举几个我身边的例子：&lt;/p&gt;
&lt;h3 id=&quot;卖男女朋友&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8D%96%E7%94%B7%E5%A5%B3%E6%9C%8B%E5%8F%8B&quot; aria-label=&quot;卖男女朋友 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;卖男女朋友&lt;/h3&gt;
&lt;p&gt;前些天，微信群里有人发了个视频，视频的大概内容是：街头采访了一帮女孩，问她们：「如果给你1000万，你愿意卖你的男朋友么？」。视频中女孩纷纷表示要卖，一定要卖！有说换个更好的；有的说男朋友不值这么多钱的；甚至有得听到问题，直接音调高了八度，瞳孔放大高兴得跳起来。&lt;/p&gt;
&lt;p&gt;视频后半部分街头采访了一些男孩，问他们：「给你们1000万，愿意卖掉的女朋友么？」。男孩们的回答：「你有病吧」、「滚」、「肯定不卖啊」云云。&lt;/p&gt;
&lt;p&gt;群里针对这个视频，展开了一场对女性朋友的口诛笔伐：「现在女孩都这样现实啦」等等。同时「男孩们都很纯洁，爱护自己的女友啦」等等。&lt;/p&gt;
&lt;p&gt;这就是典型的缺乏思考，被舆论或者是内容生产者牵着走的例子。&lt;/p&gt;
&lt;p&gt;静下来思考下，这个视频有失偏颇，最终的视频是经过剪辑的，为了满足作者的&lt;strong&gt;黑女捧男&lt;/strong&gt;的效果（恶趣味）。理智得想下，实际中应该是这样的：&lt;strong&gt;街头采访了大量的男男女女，说什么的都有，也有专一的好女孩，也有见利忘义的男孩，结果作者就保留了他想要的内容，最终剪辑成了视频，用来完成自己的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;加班不够&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8A%A0%E7%8F%AD%E4%B8%8D%E5%A4%9F&quot; aria-label=&quot;加班不够 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;加班不够&lt;/h3&gt;
&lt;p&gt;公司大领导觉得某个业务团队工作不饱和，理由是看不到大家加班。那么基层领导给大家开会时就把这个事给传达了。&lt;/p&gt;
&lt;p&gt;我们不讨论这个因果关系对不对，作为你自己，如果是在这个团队中干活的一份子，听到这个消息，你会这么想？「什么破领导，我们天天累得要死还要加班么？」或者「根本就不了解业务，高高在上的，如何能评价我们呢？」&lt;/p&gt;
&lt;p&gt;我是怎么看的？首先要先了解下团队目前的状况：业务目标不明确，人员散漫，人事变更频繁，项目缺乏，这才是问题根源。工作饱和、加班与否这些只是最终表现出来的现象。&lt;/p&gt;
&lt;p&gt;这时应该怎么办？从上到下，业务领导去请示大领导：「您觉得我们下一步应该怎么走？」 领悟圣意后（很重要！办事不由东，累死也无功！）回来，调整目标，统一思想，制定计划，鼓舞士气，开干！团队的战斗力应该从上至下来贯彻。&lt;/p&gt;
&lt;h3 id=&quot;我表弟&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%88%91%E8%A1%A8%E5%BC%9F&quot; aria-label=&quot;我表弟 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;我表弟&lt;/h3&gt;
&lt;p&gt;典型的北京人，25岁，工作很一般，家里也不富裕，但却是一只彻底的愤青，容易被舆论所左右。观察他的朋友圈内容就发现，99%都是转发，而转发的内容呢？都是说外地人在京如何如何不好，骂这些人应该滚出北京，而且转发之余，自己填写得内容部分也是言辞异常激烈，体现自己的正义（优越）感。&lt;/p&gt;
&lt;p&gt;他的圈子是什么样的？从小身边都是北京人，一帮哥们儿（我也不知道算不算狐朋狗友）京片子，估计平时他们没事聚在一起也是谈论这些事吧。缺乏对大世界的认识，活在自己狭隘的圈子里无法自拔。&lt;/p&gt;
&lt;p&gt;作为一个老北京人，我是怎么想的呢？高中毕业后参加工作，虽然在一家机关单位干了将近7年，身边北京人也不少，但会接触一些远郊区县或者外地的朋友同事等等。到后来进了互联网公司，北京本地人就成了公司的稀缺物种了。和这些外地人接触多了，发现大家都一样很努力，而且能在北京扎根工作的，不说素质吧，起码教育是受够了的，相处得很融洽，也很聊得来。慢慢的丢失了自己的京味儿，一口普通话，很少有人能听出我是北京本地人。&lt;/p&gt;
&lt;p&gt;外地人在北京生活、工作，诚然，不少人在祸害我的家园我美丽的大北京，但绝大多数人还是来建设北京城的。清晨的早点摊，每天都在修建的高楼大厦，公路，立交桥，公园。北京能变成今天这个样子全都归功于他们。（北京本地的年轻人还都忙着提笼架鸟呢，谁会去做这些底层的工作？）&lt;/p&gt;
&lt;p&gt;在未来，能留在北京城的人，都是这些付出过辛勤劳动的人，好吃懒做成天看别人不顺眼的人，迟早要让出位置的。&lt;/p&gt;
&lt;p&gt;每每看到我表弟的朋友圈言论，我都淡淡一笑，年轻人，谁没年轻过呢？呵呵&lt;/p&gt;
&lt;p&gt;台湾一个综艺节目中请的外国女嘉宾一句话：「素质高的人从不说自己素质高，更不会说其他人素质低」。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JS打包工具效果对比事件]]></title><description><![CDATA[文中对比了知名的以及不怎么知名的模块打包工具的效果，打包后大小，gzip后大小，加载以及执行效率，结果让人大跌眼镜。webpack 和 browserify 远远不如 rollup 和 closure。nolan分别在安卓，iOS，PC（Chrome52）中分别测试，横向对比结果没有改变，依然是rollup closure大幅领先。]]></description><link>http://hkongm.github.io//posts/JSBundleCompare</link><guid isPermaLink="false">http://hkongm.github.io//posts/JSBundleCompare</guid><pubDate>Wed, 31 Aug 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在浏览器中打开很久一直放着没看的一篇文章&lt;a href=&quot;https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;The cost of small modules&lt;/a&gt;，来自&lt;a href=&quot;https://github.com/nolanlawson&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;@nolanlawson&lt;/a&gt;的大作。&lt;/p&gt;
&lt;p&gt;其中对比了知名的以及不怎么知名的模块打包工具的效果，打包后大小，gzip后大小，加载以及执行效率，结果让人大跌眼镜。&lt;strong&gt;webpack&lt;/strong&gt; 和 browserify 远远不如 rollup 和 closure。nolan分别在安卓，iOS，PC（Chrome52）中分别测试，横向对比结果没有改变，依然是rollup closure大幅领先。&lt;/p&gt;
&lt;p&gt;且可以预计的未来 Webpack2 也不会有特别大的性能提升在这方面。（原文：Unfortunately I’m not sure Webpack 2 will solve any of these problems, because although they’ll be borrowing some ideas from Rollup, they seem to be more focused on the tree-shaking aspects and not the scope-hoisting aspects.）&lt;/p&gt;
&lt;p&gt;众所周知 Webpack2 一大升级就是 TreeShaking，但这次测试不涉及 TreeShaking，所以作者才敢这么说吧。&lt;/p&gt;
&lt;p&gt;文章发出来后，有人在 Webpack Repo 里 建了个 &lt;a href=&quot;https://github.com/webpack/webpack/issues/2873&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;issue/2873&lt;/a&gt; 同样在激烈讨论着。有兴趣的朋友们可以去看看。&lt;/p&gt;
&lt;p&gt;评论区中有提到，webpack 的 production 模式如何？结论是，毫无影响，希望 Webpack2 正式版出来能解决这个问题吧。&lt;/p&gt;
&lt;p&gt;最后说一句，rollup确实不错哦～&lt;/p&gt;
&lt;p&gt;好久没发博客了，好懒，好忙，最近膝盖滑膜炎了，累啊～&lt;/p&gt;</content:encoded></item><item><title><![CDATA[优创家－汽车之家媒体战略发布会]]></title><description><![CDATA[过了个春节，好久没更新文章了，节前+节后综合症，状态始终不对，慢慢调整回来吧。]]></description><link>http://hkongm.github.io//posts/YouchuangPub</link><guid isPermaLink="false">http://hkongm.github.io//posts/YouchuangPub</guid><pubDate>Sun, 12 Jun 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;好久没写新Post了，今天来个，跟技术无关。&lt;/p&gt;
&lt;p&gt;提前一天收到了邀请，作为项目组成员，出席了这次汽车之家在酒仙桥附近诺金酒店举办的战略发布会。&lt;/p&gt;
&lt;p&gt;各位嘉宾们上去站在自己的立场讲了许多话，但值得一提的有&lt;a href=&quot;http://weibo.com/u/1341681213&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;@韩岳&lt;/a&gt;的一张PPT，说到心坎里去了，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/youchuangpub1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;希望我们的 PGC 优创+ 越办越好！做点有意义，对网友用户真正有用的内容！&lt;/p&gt;
&lt;p&gt;最后，放一张自己跟270夫妇的合影，以前就知道这俩人，但确实没看过《侣行》，这次的《张梁记》在同事的显示器上搭了两眼就觉得，哎哟不错哦，有意思，结果由路人转粉了。火爆的两位大咖，合影需求源源不断，俺也上去来一张。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/youchuangpub2.jpg&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[漏点其他公司面试不到的前端面试题]]></title><description><![CDATA[最近面试有点多，最多一天7个人。。。但成功率着实不高，原因嘛，之前交代过了。今天突发奇想，要聊聊面试题。好吧，既然笔试题取消了，面试题的比重当然就要有相应的增加。]]></description><link>http://hkongm.github.io//posts/InterviewQuestion</link><guid isPermaLink="false">http://hkongm.github.io//posts/InterviewQuestion</guid><pubDate>Wed, 23 Mar 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;最近面试有点多，最多一天7个人。。。但成功率着实不高，原因嘛，之前交代过了。&lt;/p&gt;
&lt;p&gt;今天突发奇想，要聊聊面试题。好吧，既然笔试题取消了，面试题的比重当然就要有相应的增加。&lt;/p&gt;
&lt;p&gt;我的面试题的比例大概是这么分配的：HTML 10% + CSS 20% + JS 50% + 前端外知识 10% + 技术视野 10%。这是个大概的比例，内容分类也就这么多，当然要看候选人的实际情况，偶尔出来灵感想起啥就问啥（虽然能让我兴奋起来的面试者，最近20人里才有俩）。&lt;/p&gt;
&lt;p&gt;整个面试时间，从2分钟到1个半小时不等（尽量挖，挖到你的老底）。&lt;/p&gt;
&lt;p&gt;回归今天的主题，漏点我的面试题： &lt;strong&gt;CSS部分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;CSS作为前端的基础中的基础，虽然来面试的大家伙儿都能写页面，但基础好的真的不多，CSS问题不多，都是问得基础，这里举几个例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;box-sizing&lt;/code&gt; 的默认值是什么？作为读者的你，能第一时间回答出来么？这个属性作为我们解决边框占用盒模型宽高的问题最好用最常用的手段，用过的你可否了解它的默认属性是什么？也许你知道我们经常要写 &lt;code class=&quot;language-text&quot;&gt;box-sizing: border-box&lt;/code&gt;，但从没想起来要了解它的默认值吧？速度去查查文档吧。&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flexbox&lt;/code&gt; 如何让里面的元素支持换行？ &lt;code class=&quot;language-text&quot;&gt;flexbox&lt;/code&gt; 作为一个非常牛逼的万用布局方式，被FB首选（也是唯一选择）用来做React Native的布局方案，但你是否仔细研究过有关它的许多设置项？&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;position&lt;/code&gt; 有几种取值？大多数面试者都能说出 &lt;code class=&quot;language-text&quot;&gt;relative&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;absolute&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;fixed&lt;/code&gt;，这都没问题，但你知道它的默认值是什么么？20%的人能答出 &lt;code class=&quot;language-text&quot;&gt;static&lt;/code&gt;，可喜可贺，恭喜你拿了90分，我还没遇到过拿满分的面试者。最后十分是留给 &lt;code class=&quot;language-text&quot;&gt;-webkit-sticky&lt;/code&gt; 的，这个属性在OSX的 Safari 和 iOS的 Safari 上支持的很好，至于效果嘛，你知道 &lt;strong&gt;Bootstrap&lt;/strong&gt; 有个 &lt;code class=&quot;language-text&quot;&gt;affix&lt;/code&gt; 插件么？就是这个作用，CSS可以做到的哦。&lt;/li&gt;
&lt;li&gt;CSS中有一些函数，你知道几个？ 这里直接给答案了 &lt;code class=&quot;language-text&quot;&gt;hsl&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;rgb&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;rgba&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;url&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;calc&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;attr&lt;/code&gt; ，还有 &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; 下面一堆都是。&lt;/li&gt;
&lt;li&gt;基础中的基础，你知道伪元素和伪类的区别么？单冒号和双冒号的分别代表的是？写出你知道的伪类。首先，前面的概念能分清的人就不多，天天写的东西，不知道写的是什么。。。再次大家会写 &lt;code class=&quot;language-text&quot;&gt;hover&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;link&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;visited&lt;/code&gt; 这些最早的伪类，有些经验多点的可能会写出 &lt;code class=&quot;language-text&quot;&gt;first-child&lt;/code&gt; 甚至 &lt;code class=&quot;language-text&quot;&gt;nth-child&lt;/code&gt; 。但我还没遇到能写出 &lt;code class=&quot;language-text&quot;&gt;disabled&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;valid&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;invalid&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;out-of-range&lt;/code&gt; 的人。基本上可以断定，你能写出这些，你是看过我博客这篇文章的人XD。当然伪类和伪元素数量众多，这里就不都列出来了，有心人可以去自己找找答案，当然也可以顺着&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt;一窥究竟。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今天要说的，结束。&lt;/p&gt;
&lt;p&gt;PS：经常给一些实习生的建议：多看英文一手资料，少看慕课这种低效的国人三手教程，英语一定要过硬，最起码读要过关才行。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2016招人高峰期]]></title><description><![CDATA[好久没写新博了，今天聊聊最近火爆的招聘的事儿。]]></description><link>http://hkongm.github.io//posts/2016Recruiting</link><guid isPermaLink="false">http://hkongm.github.io//posts/2016Recruiting</guid><pubDate>Mon, 21 Mar 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;好久没写新博了，今天聊聊最近火爆的招聘的事儿。&lt;/p&gt;
&lt;p&gt;上周五面了6个，今天周一面了7个。。。&lt;/p&gt;
&lt;p&gt;自己的HR不太给力啊，原因比较多：一来他还要负责别的部门.Net/Java一堆职位；二来市面上的前端流动人才少之又少。公司还为了一些稀缺资源启动了第三方服务商来挖简历。&lt;/p&gt;
&lt;p&gt;顺便说下这个第三方服务商，倒是挺努力的，每隔2/3天就来几份简历，我从中看到比较合适的就约来看看，上周五一个姑娘，今天一个小伙儿，都是2分钟就打发走的水平，初级问题问了几个全挂，实在没法往下再问了。。。&lt;/p&gt;
&lt;p&gt;跟HR吐槽了下这家简历的质量，这年头没有不会写简历的，但应聘者也不想想，用人单位能单凭简历就让你进来么？面试这关怎么过？自己能力和简历对不上号的话，自己的时间不也是耽误了么？想不明白。&lt;/p&gt;
&lt;p&gt;下午去HR办公室，HR Boss找我聊了聊，问我对笔试题和笔试这个过程的意见。由于笔试时是可以使用移动设备度娘答案的，虽然在笔试题最上方已经明确说明了请真实答题不要度娘。HR Boss问我能否把笔试过程挪到线上去，总之各种弊端：效率低，真实性低。讨论的结果：决定笔试题环节取消，直接进入面试。so be it.&lt;/p&gt;
&lt;p&gt;再说关于简历来源，求人不如求己，上周一注册了个 &lt;strong&gt;BOSS直聘&lt;/strong&gt; （这玩意是智联老老大出去做的产品），试了一把自己当BOSS，主动搭讪的人还真不少。
一看都是孩子，全90后。公司薪资不具备竞争力，招到P5难上加难，只能从中矬子里拔将军拣好苗子自己培养。&lt;/p&gt;
&lt;p&gt;还真让我碰上个，上周四挖到个好小伙儿，offer顺利发掉，期望不要被其他公司截胡，最最关键的，这是我的人！！之前碰到好苗子都被其他团队定的，这次终于挖到自己的了，开心。&lt;/p&gt;
&lt;p&gt;上周五还遇到个姑娘，笔试面试效果还都不错，而且出奇的便宜，我都想给她多要点。。。领导看了后让我留心其工作经验，有几个月缺失，HR的意见是培训机构出来的，没有实际工作经验，但在我看来，这姑娘水平比某些工作2/3年的都要好啊，有点犹豫呢。
姑且看看这周的集中面试结果吧，如果挑不到满意的，招她进来试试看。&lt;/p&gt;
&lt;p&gt;除了要给自己招下属，更多的还要负责许多其它部门的前端招聘。移动部门的HR超级给力，简历量远远大于其它部门，而且要求还高，P5市面上难得一遇，要求还是1个P4多个P5…要知道我手下三大台柱也都才P4啊…&lt;/p&gt;
&lt;p&gt;也遇到过比较好的实习生，但部门HC有限，有点可惜。&lt;/p&gt;
&lt;p&gt;呃，最近还有件事：本周五要进行升职答辩了，希望自己推荐的几个人可以顺利4升5，前端的职级金字塔能健康起来。他们的能力其实早就达到了，主要看他们临场发挥和运气了，每天祈祷中。&lt;/p&gt;
&lt;p&gt;今年不用去参加答辩做评委了，还是继续忙着招人开会吧。💦&lt;/p&gt;
&lt;p&gt;团队节后回来一只处于忙碌状态，我们引以为傲的技术分享会被懈怠了，这事还得抓紧，Q2再说吧。4月1号要收下发的翻译任务啦。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2015年的总结和回顾]]></title><description><![CDATA[2015年年底，这些日子在忙一些杂事：人员预算、考核、16年目标，总结会等等。]]></description><link>http://hkongm.github.io//posts/2015Summary</link><guid isPermaLink="false">http://hkongm.github.io//posts/2015Summary</guid><pubDate>Mon, 01 Feb 2016 05:37:31 GMT</pubDate><content:encoded>&lt;p&gt;2015年年底，这些日子在忙一些杂事：人员预算、考核、16年目标，总结会等等。&lt;/p&gt;
&lt;p&gt;今年干了几件大事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;三大件规范落地：辅以Lint工具，规范这玩意终于可以落地了；&lt;/li&gt;
&lt;li&gt;Git落地：全公司前端的项目代码，在自建的Gitlab中，目前共有50个；&lt;/li&gt;
&lt;li&gt;gulp + SASS全统一：虽然大家水平不一，有些人的起点比较低，但起点低也开始接受这两项效率工具了，当然还有些天资聪颖的小伙伴开始自己写插件了，非常棒！&lt;/li&gt;
&lt;li&gt;全年14次技术分享；&lt;/li&gt;
&lt;li&gt;全年17篇外国先进技术文章翻译；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自己一，一年一个，拿了两次软件著作权。。。没想到这东西这么好拿？&lt;/p&gt;
&lt;p&gt;下面是一起共事了近三年的同学，上交周报的最后一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是今年的最后一个周报，在这特别感谢蔡哥过去一年的培养和关照，年后回来攒足劲儿，努力学习，努力工作。😄😄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;得到这样的肯定，很开心啊，甚至比Boss的直接表扬还开心。&lt;/p&gt;
&lt;p&gt;最后来张全家福，纪念这一刻。缺了一个人，这家伙已经喝得边上躺着去了，还有几个姑娘提前回家了&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/media/2015Summary.jpg&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ES6Cheatsheet中文版]]></title><description><![CDATA[最近Github上很火爆的一个项目 es6-cheatsheet，发本文时，该项目Star数在5732个。得知这个项目后，动了翻译个中文版本的心思，用了一周多的碎片时间（年终总结会，第二天早上在酒店中爬起来），断断续续的翻译了个版本并提了PR，作者响应很快啊，马上就给予合并了。]]></description><link>http://hkongm.github.io//posts/ES6CheatsheetInChinese</link><guid isPermaLink="false">http://hkongm.github.io//posts/ES6CheatsheetInChinese</guid><pubDate>Mon, 01 Feb 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;最近Github上很火爆的一个项目 &lt;a href=&quot;https://github.com/DrkSephy/es6-cheatsheet&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;es6-cheatsheet&lt;/a&gt;，发本文时，该项目Star数在5732个。&lt;/p&gt;
&lt;p&gt;得知这个项目后，动了翻译个中文版本的心思，用了一周多的碎片时间（年终总结会，第二天早上在酒店中爬起来），断断续续的翻译了个版本并提了PR，作者响应很快啊，马上就给予合并了，这是&lt;a href=&quot;https://github.com/DrkSephy/es6-cheatsheet/blob/master/README_zhCn.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;中文版地址&lt;/a&gt;。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[NewThemeForHexo]]></title><description><![CDATA[花了不到一天的时间，写了一套自己的HEXO主题。layout index list post 已经到位，接下来的工作是翻页，各种小元件，还有手机的适配。]]></description><link>http://hkongm.github.io//posts/NewThemeForHexo</link><guid isPermaLink="false">http://hkongm.github.io//posts/NewThemeForHexo</guid><pubDate>Wed, 30 Dec 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;花了不到一天的时间，写了一套自己的HEXO主题。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;layout&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;list&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt; 已经到位，接下来的工作是翻页，各种小元件，还有手机的适配。&lt;/p&gt;
&lt;p&gt;由于目前的新版式，手机适配还是比较简单的，几个mq就搞定了。&lt;/p&gt;
&lt;p&gt;难得的几个小时啊，能写点代码，心情舒畅很多。&lt;/p&gt;
&lt;p&gt;未来想使用&lt;strong&gt;jade&lt;/strong&gt;来做模板，看时间和心情了。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&quot;工作方面&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B7%A5%E4%BD%9C%E6%96%B9%E9%9D%A2&quot; aria-label=&quot;工作方面 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;工作方面&lt;/h3&gt;
&lt;p&gt;年终考核终于来了，这几天在忙着自评，催着大家写自评并打分，271的正态分布有道理，但执行上有难度，手心手背都是肉，要做思想工作咯。&lt;/p&gt;
&lt;p&gt;2015年这就过去了，是应该总结一下了。需要构思下怎么搞。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[好久没见]]></title><description><![CDATA[Jekyll的一些插件，虽然博客源码还在remote repo上，这次改用 **HEXO** 继续写]]></description><link>http://hkongm.github.io//posts/longtimenosee</link><guid isPermaLink="false">http://hkongm.github.io//posts/longtimenosee</guid><pubDate>Tue, 15 Dec 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;好久没更新博客了，理由嘛，有很多：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个博客建立一年有余，感慨～&lt;/li&gt;
&lt;li&gt;工作好忙啊&lt;/li&gt;
&lt;li&gt;自己的Macbook重装了，用了快3年，想折腾下&lt;/li&gt;
&lt;li&gt;因为上面原因，虽然之前做足了备份，结果还是忘了些东西，其中包括Jekyll的一些插件，虽然博客源码还在remote repo上，这次改用 &lt;strong&gt;HEXO&lt;/strong&gt; 继续写。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;好久没写代码了，偶尔闲时会很惆怅～所以昨天就从JIRA上接了个小活儿，要了1天，2小时搞定。&lt;/p&gt;
&lt;p&gt;关于博客：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由Jekyll迁移到HEXO&lt;/li&gt;
&lt;li&gt;重新整理了文章们，标签啊等等&lt;/li&gt;
&lt;li&gt;HEXO的git depoly驯服有点困难，会遇到权限和仓库嵌套问题，&lt;code class=&quot;language-text&quot;&gt;generate&lt;/code&gt; 不支持制定目录的。。。&lt;/li&gt;
&lt;li&gt;呃，先把内容整了，装修的事，等有时间慢慢小搞，收录最重要 XD 我还活着&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最近发生了一些小事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己和老婆一人一个KPW3入手，感谢京东全球购。&lt;/li&gt;
&lt;li&gt;儿子从吐单字升级到今天的可以说简单的句子了：“游乐场玩够了么？”答曰：“玩不够”。&lt;/li&gt;
&lt;li&gt;准备第四学期周末考试了，明年再坚持半年，拿学位！&lt;/li&gt;
&lt;li&gt;胃肠出了点问题，坚持喝牛奶调制吧，第二天，已经见效。&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[线上Bug，主动出击！]]></title><description><![CDATA[昨天收到微博运营同事的消息说，不止一位用户在微博中反映，我们站点的所有主要页面的中间内容区域呈空白状，换了几个浏览器都是这样。本来是优先报给运维部门的，也拉上了我前端。点开微博挨个看了下，发现其中一个用户在回复时提到了自己的QQ。遂主动加了好友帮助排查问题，步骤：]]></description><link>http://hkongm.github.io//posts/QQADBlock</link><guid isPermaLink="false">http://hkongm.github.io//posts/QQADBlock</guid><pubDate>Wed, 21 Oct 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;昨天收到微博运营同事的消息说，不止一位用户在微博中反映，我们站点的所有主要页面的中间内容区域呈空白状，换了几个浏览器都是这样。&lt;/p&gt;
&lt;p&gt;本来是优先报给运维部门的，也拉上了我前端。点开微博挨个看了下，发现其中一个用户在回复时提到了自己的QQ。遂主动加了好友帮助排查问题，步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;换浏览器，问题依旧；&lt;/li&gt;
&lt;li&gt;开Chrome内核浏览器（用户用的搜狗），开控制台，勾选禁用JS看效果，问题依旧；&lt;/li&gt;
&lt;li&gt;Ctrl＋U，将源代码复制出来，存纯文本，发了过来代码一切正常；&lt;/li&gt;
&lt;li&gt;开控制台，Elements工具，右键选中&lt;code class=&quot;language-text&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt;点Copy，粘贴为文本文档发来我看，此时发现了问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在浏览器渲染结果后的代码中，&lt;code class=&quot;language-text&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;上面出现了&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.advbox,.subbox_adv,.subadv2,[class^=&quot;advbox&quot;],.advarticle,.serve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;none &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;div[class=&quot;row&quot;],div[class=&quot;advbox pa-b20&quot;],div[class=&quot;advbox&quot;],div[id=&quot;tmadvtip&quot;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;none &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一行被注入的样式代码，其中的规则一看就是针对autohome广告的屏蔽代码，但其中有&lt;code class=&quot;language-text&quot;&gt;div[class=&amp;quot;row&amp;quot;]&lt;/code&gt;这么个规则。这个class是我们PC全站使用的CSS Grid布局中最基础的一个类，导致了几乎所有PC站点内容部分被当作广告误杀了。&lt;/p&gt;
&lt;p&gt;锁定问题后，为了再度确认，我们自己安装QQ管家，但没有发现这个情况，与客户再度确认后确实是因为QQ管家导致这个问题，且用户使用的是&lt;em&gt;11.0.16779.224测试版&lt;/em&gt;，最新的正式版则没有这个问题。&lt;/p&gt;
&lt;p&gt;关于此次事件，体会最深的是&lt;strong&gt;做事的态度&lt;/strong&gt;，在群里拉了好多人分析问题甚至是踢皮球，远不如直接去联系客户，最快速地判定问题点，迅速出台解决方案，这也是汽车之家一直以来贯彻的企业文化。&lt;/p&gt;
&lt;p&gt;准备周末的周例会上给大家分享下这次事件，给大家涨涨经验，更是一个再度强调企业文化的好机会。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[新岗位迷思，彻底M了]]></title><description><![CDATA[正常上班后，自己在公司这边正式变成走M线了，虽然自己的摊子名义上又大了不少，但经过这些天一连串的事件，前端开发部门人数从22人锐减到12人，将近一半的人出于各种原因，都找到了适合自己的事业部，有自愿的，有被软磨硬泡怕麻烦答应转部门的，还有抓住机会奔着自己做管理的目标去努力的，我祝福大家伙儿。]]></description><link>http://hkongm.github.io//posts/JobPuzzle</link><guid isPermaLink="false">http://hkongm.github.io//posts/JobPuzzle</guid><pubDate>Tue, 13 Oct 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;国庆放假，去东北玩了几天，顺便把儿子接回了北京。中途在山海关逗留了一宿也是考虑到孩子长途旅行可能坚持不下来，结果第二天回来的时候，高速堵车，300公里开了十个小时，十一点半才到家，进京检查站成了最大堵点，人祸啊。&lt;/p&gt;
&lt;p&gt;孩子在服务区精神奕奕的拖着一桶开始发臭的小螃蟹在餐厅来回地溜达，看来孩子比大人更能禁受住长途旅行的折磨啊，他玩累了就睡，可不管三七二十一。&lt;/p&gt;
&lt;p&gt;正常上班后，自己在公司这边正式变成走M线了，虽然自己的摊子名义上又大了不少，但经过这些天一连串的事件，前端开发部门人数从22人锐减到12人，将近一半的人出于各种原因，都找到了适合自己的事业部，有自愿的，有被软磨硬泡怕麻烦答应转部门的，还有抓住机会奔着自己做管理的目标去努力的，我祝福大家伙儿。&lt;/p&gt;
&lt;p&gt;值得庆幸的，我的M团队成员一直很稳定，作为新团队的基础与核心继续支持我，虽然有一人离我而去自己带团队了，我当然是非常鼓励啦，有机会要抓住，证明自己！挨着我坐时间久了，被熏也能熏出些思维模式和沟通技巧吧，嘿嘿，排新座位时，安排了一个92年有潜力的小伙在身边，看看将来能有啥出息。&lt;/p&gt;
&lt;p&gt;团队明年的工作重点由主要支持业务，变成了基础建设，新技术调研和应用，人员孵化，技术咨询和支持，难度陡然提高了不少，好在留下的都是技术过硬的主力！其实还是蛮有信心的，反而担心的是，仅存的事业部还在大幅招人，尤其是产品，会不会给我们时间和精力来做这些事呢？&lt;/p&gt;
&lt;p&gt;虽然在智联期间也做过一部份管理工作，但这边与那边的工作量级完全不一样啊，近一个月来写代码的时间骤减，掰掰手指头算一算，加起来也就一个小时，这个数字让自己非常担心，如果这样下去，今后还能搞技术么？没了技术，是不是就要老死在汽车之家了呢？心中的疑惑陪伴了我一年多后将会一直陪伴下去吧？也许明年局面打开后能渐渐看破迷雾吧。自己还是坚信，不是所有会写代码的coder都适合带人走管理的，管理人才还是稀缺的。&lt;/p&gt;
&lt;p&gt;好在自己还在坚持看技术文章，各方面的英文第一手资料不能停，抓住时间就读几篇，奢侈地连续两个小时浸泡在其中的感觉是非常美妙的。&lt;/p&gt;
&lt;p&gt;今天这篇博客是在地铁上用simplenote起草的，留个记录，顺便，儿子很可爱，在家的时间全留给小家伙了。最后，还有不得不上的每周五门课……人生最累的阶段！坚持！&lt;/p&gt;
&lt;p&gt;最后感谢同样努力的贤内助，老婆大人！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[分享个Karabiner的配置文件，cmd／opt兑换位置＋翻转鼠标滚轮]]></title><description><![CDATA[买了机械键盘后，在系统设置里无法更改修饰键（樱桃键盘是可以的……我支持了*便宜的*国产……），最后只能求助于Karabiner。]]></description><link>http://hkongm.github.io//posts/Karabiner</link><guid isPermaLink="false">http://hkongm.github.io//posts/Karabiner</guid><pubDate>Tue, 22 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;买了机械键盘后，在系统设置里无法更改修饰键（樱桃键盘是可以的……我支持了&lt;em&gt;便宜的&lt;/em&gt;国产……），最后只能求助于Karabiner。&lt;/p&gt;
&lt;p&gt;最开始的时候是直接使用预制的opt、cmd键的设置在用，在用本子自己的键盘时要切换模式，太麻烦了。&lt;/p&gt;
&lt;p&gt;后来发现这软件可以还可以修改鼠标的行为，就想自己改改&lt;code class=&quot;language-text&quot;&gt;private.xml&lt;/code&gt;来配置下。于是乎，下面这段xml就出来了，功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对换外接键盘左侧的cmd和opt键。&lt;/li&gt;
&lt;li&gt;翻转外接鼠标的滚轮方向。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样一来，Reverse Scroll这个App也可以请出去了（据说这个App会导致一些莫名其妙的Bug）。&lt;/p&gt;
&lt;p&gt;下面是正文。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Reverse Vertical Scrolling for Mouse&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;identifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;private.reverse_vertical_scrolling_mouse&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;identifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;device_not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      DeviceVendor::APPLE_COMPUTER,
      DeviceProduct::ANY
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;device_not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;autogen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      __FlipScrollWheel__
      &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- reverse vertical scrolling --&gt;&lt;/span&gt;
      Option::FLIPSCROLLWHEEL_VERTICAL
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;autogen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Toggle Left Cmd and Opt for Other Keyboard&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;identifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;private.toggle_left_cmd_and_opt&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;identifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;device_not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    DeviceVendor::RawValue::0x05ac,
    DeviceProduct::RawValue::0x0259
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;device_not&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;autogen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      __KeyToKey__ KeyCode::COMMAND_L, KeyCode::OPTION_L
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;autogen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;autogen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      __KeyToKey__ KeyCode::OPTION_L, KeyCode::COMMAND_L
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;autogen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Webpack技术分享]]></title><description><![CDATA[上周给团队内部分享了《Webpack入门》，配有简要的PPT和几个由浅入深（其实也不是很深啦）的例子。在这里发出来给大家分享下哈。]]></description><link>http://hkongm.github.io//posts/Webpack</link><guid isPermaLink="false">http://hkongm.github.io//posts/Webpack</guid><pubDate>Thu, 17 Sep 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;上周给团队内部分享了《Webpack入门》，配有简要的PPT和几个由浅入深（其实也不是很深啦）的例子。&lt;/p&gt;
&lt;p&gt;在这里发出来给大家分享下哈。&lt;a href=&quot;https://github.com/hkongm/WebpackGuide&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/hkongm/WebpackGuide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近很忙，公司业务变动较大，自己的工作内容方面有了些变动，总体来说是更好啦，未来应该会更忙吧，博客要坚持下去啊～不知道能坚持多久。&lt;/p&gt;
&lt;p&gt;不要第三次半途而废！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Velocity 2015 Review]]></title><description><![CDATA[参加了日前在京举办的 Velocity 技术大会，整理下主要内容做个记录。]]></description><link>http://hkongm.github.io//posts/Velocity2015Review</link><guid isPermaLink="false">http://hkongm.github.io//posts/Velocity2015Review</guid><pubDate>Tue, 18 Aug 2015 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;参加了日前在京举办的 Velocity 技术大会，整理下主要内容做个记录，总结＋截图，给团队的小伙伴们分享的，同时这里发一份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总体感想&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%80%BB%E4%BD%93%E6%84%9F%E6%83%B3&quot; aria-label=&quot;总体感想 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;总体感想&lt;/h2&gt;
&lt;p&gt;性能优化开始从前后端代码／技术栈方面，全转向了距离硬件更近的领域（运维），比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP2/SPDY（TCP）&lt;/li&gt;
&lt;li&gt;DNS lookup&lt;/li&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;各种方法降低Latency / TTFB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又比如，更贴近客户体验端的优化，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loading 中启用动画&lt;/li&gt;
&lt;li&gt;Page Block级别的Placeholder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于JS库的态度：众多的jQuery及其插件真的有用么？不如考虑使用原生JS+Polyfill&lt;/p&gt;
&lt;p&gt;Amazon还在支持IE6 ：给IE6用户非华丽的体验，实际是对用户也是好的&lt;em&gt;（这点很有深意，请细心体会，当然产品经理们更需要细心体会）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;作为前端，本次大会，新的技术点很少，Relay算一个，但只是提了一句，毕竟刚刚开源&lt;/p&gt;
&lt;h2 id=&quot;参与制定w3c标准&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8F%82%E4%B8%8E%E5%88%B6%E5%AE%9Aw3c%E6%A0%87%E5%87%86&quot; aria-label=&quot;参与制定w3c标准 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;参与制定W3C标准&lt;/h2&gt;
&lt;p&gt;未标准（未来）贡献你的微薄之力，有什么好点子尽量拿出来讨论。参与标准定制原则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;毋以善小而不为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;urls&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#urls&quot; aria-label=&quot;urls permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;URLs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://discourse.wicg.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Specifiction Discourse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://extensiblewebmanifesto.org&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;The Extensible Web Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/community/wicg/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;WEB PLATFORM INCUBATOR COMMUNITY GROUP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webcomponents.org&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;webcomponents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://testthewebforward.org&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Test the Web Forward&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;yahoo的reactflux在s／c端的实践&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#yahoo%E7%9A%84reactflux%E5%9C%A8s%EF%BC%8Fc%E7%AB%AF%E7%9A%84%E5%AE%9E%E8%B7%B5&quot; aria-label=&quot;yahoo的reactflux在s／c端的实践 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Yahoo的React&amp;#x26;Flux在S／C端的实践&lt;/h2&gt;
&lt;h3 id=&quot;模型&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%A8%A1%E5%9E%8B&quot; aria-label=&quot;模型 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;模型&lt;/h3&gt;
&lt;p&gt;Server side: Node.js + Express&lt;/p&gt;
&lt;p&gt;Client side: Webpack + Polyfills&lt;/p&gt;
&lt;p&gt;Middle area: Fluxible + React + CommonJS&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1848.JPG&quot; alt=&quot;图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;目前已经实装该架构的站点&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%9B%AE%E5%89%8D%E5%B7%B2%E7%BB%8F%E5%AE%9E%E8%A3%85%E8%AF%A5%E6%9E%B6%E6%9E%84%E7%9A%84%E7%AB%99%E7%82%B9&quot; aria-label=&quot;目前已经实装该架构的站点 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;目前已经实装该架构的站点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tw.mobi.yahoo.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Yahoo台湾M站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sports.yahoo.com/dailyfantasy&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Sports Daily Fantasy App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.yahoo.com/beauty&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Beauty digital magazines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;技术点&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%8A%80%E6%9C%AF%E7%82%B9&quot; aria-label=&quot;技术点 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;技术点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Flux实现，使用&lt;a href=&quot;http://fluxible.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;fluxible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YUI团队开源的（也许有用的）React组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yahoo/react-i13n&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;react i13n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yahoo/react-intl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;react intl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端性能-alva-cheung-google&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD-alva-cheung-google&quot; aria-label=&quot;前端性能 alva cheung google permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;前端性能 Alva Cheung (Google)&lt;/h2&gt;
&lt;h3 id=&quot;要点：&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%A6%81%E7%82%B9%EF%BC%9A&quot; aria-label=&quot;要点： permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;要点：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;数据显示：页面加载时间会随着带宽增加越来越不明显；但会跟随Latency的降低而持续减低 &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1859.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;使用DNS Prefetch&lt;/li&gt;
&lt;li&gt;谨慎使用 Prerender，&lt;strong&gt;举例：google结果页的前两个结果会启用prerender，给用户造成结果秒开的体验&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Javascript中的代码细节：&lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1860.JPG&quot; alt=&quot;图&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dog1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Jim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dog2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Bin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// dog1和dog2公用一个hidden class&lt;/span&gt;

dog2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;breed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;new name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//此时内存中会新创建hidden class一个&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Javascript中的代码细节：compiler（特制closure compiler，参考&lt;a href=&quot;https://developers.google.com/closure/compiler/docs/js-for-compiler&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt;和&lt;a href=&quot;http://blog.csdn.net/zj831007/article/details/6801110&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里是中文的&lt;/a&gt;）会认识JS原文件中的注解(annotation)，有针对性的进行优化&lt;strong&gt;（这是新知识点）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**
 * Returns a new Point which is the original point translated by distance in
 * both the x and y dimensions.
 * @param {example.Point} point
 * @param {number} distance
 * @return {example.Point}
 */&lt;/span&gt;
example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;translate&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;point&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; distance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; distance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    y&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; distance
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;在真实的设备上测试FPS。（Timeline工具的使用）&lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1861.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;事件节流技术（老生常谈的 throttling）&lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1862.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;功能实验模型&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%8A%9F%E8%83%BD%E5%AE%9E%E9%AA%8C%E6%A8%A1%E5%9E%8B&quot; aria-label=&quot;功能实验模型 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;功能实验模型&lt;/h2&gt;
&lt;p&gt;如何在真实环境上测试N个功能？看每个新功能的实际效果。&lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1871.JPG&quot; alt=&quot;图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;代码方案：&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BB%A3%E7%A0%81%E6%96%B9%E6%A1%88%EF%BC%9A&quot; aria-label=&quot;代码方案： permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;代码方案：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在JS中if（功能开关）；在SCSS中if（功能开关）&lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1872.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;在JS中原型链覆盖；在SCSS中class覆盖&lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1873.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;资源方案：&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%B5%84%E6%BA%90%E6%96%B9%E6%A1%88%EF%BC%9A&quot; aria-label=&quot;资源方案： permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;资源方案：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;独立：NONONONONO &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1874.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;HTTP2的Server Push &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1875.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;不变的＋可变的combo &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1876.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;yahoo-react--flux-实践&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#yahoo-react--flux-%E5%AE%9E%E8%B7%B5&quot; aria-label=&quot;yahoo react  flux 实践 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Yahoo React &amp;#x26; Flux 实践&lt;/h2&gt;
&lt;p&gt;开场大量篇幅讲了React基础和Flux概念&lt;/p&gt;
&lt;p&gt;重要实践填坑内容，因为被叫出去说事，没听到……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flux方案的升级版本 &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1879.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;启用了Apache的ESI组件，进行页面拼装，降低TTFB &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1881.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;服务器React渲染的问题和技巧 &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1882.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;Flux下通过Store管理提炼数据 &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1885.JPG&quot; alt=&quot;图&quot;&gt; (超注：我们广告这边动辄20M的JSON……噩梦）&lt;/li&gt;
&lt;li&gt;服务端渲染（传统站点） VS 客户端渲染（后市场M站） VS Preload（咱们有么……） 三种渲染方式对比，适应场景 &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1887.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;如果你用了lodash&amp;#x26;&amp;#x26;lodash.merge，记得一定要&lt;code class=&quot;language-text&quot;&gt;require(&amp;#39;lodash/object/merge&amp;#39;)&lt;/code&gt;&lt;strong&gt;性能巨坑&lt;/strong&gt; &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1888.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;CSS的处理，在用&lt;a href=&quot;http://acss.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Atomic CSS
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中检测要做S／C端的区别，比如：服务器端的那接口用&lt;code class=&quot;language-text&quot;&gt;request&lt;/code&gt;，客户端要封装一层&lt;code class=&quot;language-text&quot;&gt;ajax&lt;/code&gt;，统一对外暴露一套API供组件使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;淘宝天猫m&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%B7%98%E5%AE%9D%E5%A4%A9%E7%8C%ABm&quot; aria-label=&quot;淘宝天猫m permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;淘宝天猫M&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用CDN！阿里云有强大的CDN！&lt;/li&gt;
&lt;li&gt;在移动端，连接数代价远远高于代码量（file size）&lt;/li&gt;
&lt;li&gt;前端能做的：域名收敛（降低其他域名出现的次数）&lt;/li&gt;
&lt;li&gt;淘宝首页用one-request打包，听着类似于Webpack，Webpack未来两周内，准备好会给大家分享&lt;/li&gt;
&lt;li&gt;自己写Scroll，因为ios safari 原生 scroll触发问题，不能在其中做任何操作&lt;/li&gt;
&lt;li&gt;降低&lt;code class=&quot;language-text&quot;&gt;composition layers&lt;/code&gt;，提升FPS，会产生&lt;code class=&quot;language-text&quot;&gt;composition layers&lt;/code&gt;的方法 &lt;img src=&quot;http://dl.caichao.me/assets/velocity2015/IMG_1894.JPG&quot; alt=&quot;图&quot;&gt;&lt;/li&gt;
&lt;li&gt;对图片的处理，50质量压缩＋150%的锐化（CDN自动完成）&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Velocity 2015 参会记录]]></title><description><![CDATA[11、12日两天，去参加了 O'Really Velocity Conf 2015，两天听下来，发觉每次参会，能学到的东西越来越少了。有几个感觉：]]></description><link>http://hkongm.github.io//posts/Velocity2015</link><guid isPermaLink="false">http://hkongm.github.io//posts/Velocity2015</guid><pubDate>Thu, 13 Aug 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;11、12日两天，去参加了 O’Really Velocity Conf 2015，两天听下来，发觉每次参会，能学到的东西越来越少了。有几个感觉：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;广告太多，2天时间，其中至少1天的时间都是广告&lt;/li&gt;
&lt;li&gt;APM被炒得火热&lt;/li&gt;
&lt;li&gt;几个说中文的外国人内容还是挺不错的，比较新颖，还有&lt;code class=&quot;language-text&quot;&gt;React&lt;/code&gt; / &lt;code class=&quot;language-text&quot;&gt;Flux&lt;/code&gt;的分享；&lt;strong&gt;lingyan&lt;/strong&gt;在问到有谁知道&lt;code class=&quot;language-text&quot;&gt;Relay&lt;/code&gt;时，只有不到5个人举手，俺就是其中之一，嘿嘿&lt;/li&gt;
&lt;li&gt;惊闻&lt;code class=&quot;language-text&quot;&gt;Relay&lt;/code&gt;开源了！就这几天的事！！已经2600个Star了！&lt;a href=&quot;https://github.com/facebook/relay&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;github here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;技术上再进行优化提速的空间已不大，开始在交互设计、产品、用户心理方面继续挖掘能做的事&lt;/li&gt;
&lt;li&gt;午餐很丰盛，比QCon强得不是一点半点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;中午写了点博客，这就回去整理整理些会上的要点，准备给团队分享了&lt;/p&gt;</content:encoded></item><item><title><![CDATA[读了一本蹩脚的书]]></title><description><![CDATA[最近在读一本关于培养领导力的书。应该是自己水平和阅历不足吧，其中的内容大多无法理解，通篇都是别人的名言引用，大道理一句接一句，字很多但好像又啥都没说。讲了两种冥想方法多么牛逼，就是不告诉你怎么做…唯有摘抄一些有意思的名人名言，如下]]></description><link>http://hkongm.github.io//posts/Reading</link><guid isPermaLink="false">http://hkongm.github.io//posts/Reading</guid><pubDate>Mon, 03 Aug 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;呃，最近自己对React的理解又深了一层…ES6写得很爽很爽！&lt;/p&gt;
&lt;p&gt;部门新人基础比较差，好在学习态度很好，希望尽快带出来进入角色&lt;/p&gt;
&lt;p&gt;跟了我好几年的小伙伴要离职跟自己的弟弟去创业了，也有点舍不得，不过还是要祝福他&lt;/p&gt;
&lt;p&gt;博客好久没更新了，我会回来的&lt;/p&gt;
&lt;p&gt;最近在读一本关于培养领导力的书&lt;/p&gt;
&lt;p&gt;应该是自己水平和阅历不足吧，其中的内容大多无法理解，通篇都是别人的名言引用，大道理一句接一句，字很多但好像又啥都没说。讲了两种冥想方法多么牛逼，就是不告诉你怎么做…&lt;/p&gt;
&lt;p&gt;唯有摘抄一些有意思的名人名言，如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;勇气是其他美德得以攀登的阶梯。by 克莱尔.布鲁斯南&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;品格意味着要先天下之忧，后天下之乐而乐。它考虑的是“什么是正确的？”而不是“谁是正确的？”。 by 诺埃尔.蒂奇和沃伦.本尼斯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;个性能助你开启成功之门，但只有品格才能让你持续成功。 by 埃尔玛.雷特曼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们把“谁”排在“什么”后面时，目的就会变得很清晰。by 理查德.莱德《目的的力量：让你的工作和生活充满意义》（The Power of Purpose: Creating Meaning in Your Lift and Work）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不能表达出自己的真实想法，如果你不能倾听自己的真正心声，就意味着你已经背叛了自己。by 罗洛.梅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们重视的是自己相信的东西，而不是我们所知道的本质的东西；如果我们珍惜自己已拥有的东西，而忽视实际存在的东西——那我们就无法得到真实的东西。by 纳赛尼尔.博兰登&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;旁观者眼睛里的压力既能激发有目标的远见，也能投下阴影。by迪娜.饶克&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果A代表人生中的成功，那么A就等于X加Y加Z，X是工作，Y是休闲，Z则是不说话。by 阿尔伯特.爱因斯坦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;沟通中最重要的事情是倾听还没有说出来的话。by彼得.德鲁克&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[ES 2015 技术分享]]></title><description><![CDATA[两个月前就开始准备的ES2015（原名ECMA Script 6）的技术分享，正值ES6规范正式定稿之际（完全是巧合，哈哈），在上周五的时候，给组内做了次技术分享，其中涵盖了比较能说明新特性的若干例子。]]></description><link>http://hkongm.github.io//posts/ES2015</link><guid isPermaLink="false">http://hkongm.github.io//posts/ES2015</guid><pubDate>Tue, 23 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;两个月前就开始准备的ES2015（原名ECMA Script 6）的技术分享，正值ES6规范正式定稿之际（完全是巧合，哈哈），在上周五的时候，给组内做了次技术分享，其中涵盖了比较能说明新特性的若干例子。&lt;/p&gt;
&lt;p&gt;介绍了新版本规范的若干新特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrows function&lt;/li&gt;
&lt;li&gt;default + reset + spread&lt;/li&gt;
&lt;li&gt;let + const&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Map + Set&lt;/li&gt;
&lt;li&gt;Destructuring&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;Iterators&lt;/li&gt;
&lt;li&gt;Symbols&lt;/li&gt;
&lt;li&gt;Enhanced Object Literals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里放出&lt;a href=&quot;/media/ES2015.pdf&quot;&gt;70多页的分享Keynote PDF&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Webpack＋Sass+React Starter Kit]]></title><description><![CDATA[这几天工作不是很忙，终于有时间整了整一直要学的 Webpack，这东西看着复杂，跟着教程一步步弄下来还算简单。基本算是入门简单，越学越难（后面你要不要自己写Loader？呵呵）]]></description><link>http://hkongm.github.io//posts/WebpackStarterKit</link><guid isPermaLink="false">http://hkongm.github.io//posts/WebpackStarterKit</guid><pubDate>Fri, 19 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;这几天工作不是很忙，终于有时间整了整一直要学的 &lt;code class=&quot;language-text&quot;&gt;Webpack&lt;/code&gt;，这东西看着复杂，跟着教程一步步弄下来还算简单。基本算是入门简单，越学越难（后面你要不要自己写Loader？呵呵）&lt;/p&gt;
&lt;p&gt;遂在Github上新整了个仓库，把完整Demo放上来，而且连着4天提交代码啦，超过了以往连续3天的纪录，还是看时间。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hkongm/WebpackAndReactDemo&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;代码地址：https://github.com/hkongm/WebpackAndReactDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仓库中，有个&lt;code class=&quot;language-text&quot;&gt;simple&lt;/code&gt;分支，保持个最初版本吧，webpack+React+Sass的基本配置。&lt;/p&gt;
&lt;p&gt;目前在专注于更新Editor分支，争取在需求高峰来临之前弄弄出个东西。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[你是一个Real Programer么？]]></title><description><![CDATA[今早扫RSS时，在伯乐的RSS上看到了一篇文章《一个平庸程序员的自白》。读过后，心中很有共鸣，里面的许多想法，自己也曾有过，其实我们绝大多数人都不属于那1%，但我们可以努力争取剩下的99%中里面那1%。就算是个平庸程序员，就算不是大牛，只要自己挣钱养活自己养活家人，那也是值得尊重的。]]></description><link>http://hkongm.github.io//posts/RealProgramer</link><guid isPermaLink="false">http://hkongm.github.io//posts/RealProgramer</guid><pubDate>Thu, 11 Jun 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今早扫RSS时，在伯乐的RSS上看到了一篇文章《一个平庸程序员的自白》。&lt;/p&gt;
&lt;p&gt;读过后，心中很有共鸣，里面的许多想法，自己也曾有过，其实我们绝大多数人都不属于那1%，但我们可以努力争取剩下的99%中里面那1%。&lt;/p&gt;
&lt;p&gt;就算是个平庸程序员，就算不是大牛，只要自己挣钱养活自己养活家人，那也是值得尊重的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.douban.com/note/502532701/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;原文链接&lt;/a&gt;下面有评论，下面是原文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jacob Kaplan-Moss 是著名 Python 框架 Django 的 Co-Creater 和核心开发者，在 Heroku 担任安全部门的 Director, 他常年参加 Python 社区的年度聚会 PyCon ，并经常上台演讲。在这次 PyCon 2015 上，他声称自己顶多只是一个平庸的程序员，幻灯片上也写着：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“Hi, I’m Jacob, and I’m a mediocre programmer.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这次演讲非常精彩，视频可以在 Youtube 上看到（如果不想看视频，这里也有一篇文字总结：&lt;a href=&quot;https://lwn.net/Articles/641779/%EF%BC%89%E3%80%82Jacob&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://lwn.net/Articles/641779/）。Jacob&lt;/a&gt; 以马拉松为例，试图说明大部分人在大部分领域都是平庸的（Most people are average at most things.），特别好的和特别坏的都是极少数，但在程序员领域，我们听到的大都是某某程序员 rocks 或者 sucks ，基本没有中间状态，这是一件非常奇怪的事情。他还提到“真正的程序员”（real programmer）这个概念，也就是所谓的 “10x programmer” ，你只有精通某些原理或者长得像 Mark Zarkerberg 才算是一个 real programmer ，而一个使用各种云服务以及 API 快速搭建自己应用的人就不算，这非常可笑。顺带一提，Jacob 的 Twitter 个人简介就是 “not a real programmer. ”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Jacob 认为这种关于“编程天才”的神话非常有害，一方面它把行业门槛设置得特别高，令很多人望而却步，另一方面它也在折磨行业内的人，因为你如果不能 rocks ，就会变成 sucks ，所以不得不用一切时间来努力学习和工作，导致影响生活。他认为我们应该改变这种态度，编程只是一些技能，并不需要太多天分，它是可以学习的，而且做一个平庸的程序员不丢人，“it’s cool to be okay at these skills”。跑步的人有很多种——短跑运动员，纯粹为了锻炼身体的人，参加马拉松的人，等等。为什么编程就一定要做 real programmer ，而且做不到就觉得自己不配编程呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这个演讲在大会现场赢得很多掌声，在提问环节也可以听到一些怯生生的声音说：“我也是一个平庸的程序员。” 不过在其它地方也引起一些争议，有人认为拿跑步和编程对比并不恰当，有人说程序员能力的差距确实大得惊人，有兴趣的人可以去看 Hacker News 上的讨论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于我个人来说，Jacob 的演讲触动了我多年来的心结，让我非常感动。我一直认为自己顶多只是一个平庸的程序员，而且无论多么努力学习，总觉得自己不是一个 real programmer ，而且好像越走越偏。Jacob 的演讲让我明白，有此苦恼的大概不只我一人，所以这里写一下自己的心路历程，希望对别人有一些启发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;公开承认自己平庸是一件危险的事情，如果不能说明你智商低或者没有天分，至少说明你态度有问题：“平庸就应该去努力练习，而不是写文章为平庸辩解”。而当你说 Jacob 这样的人也承认自己平庸时，就会出现一堆带有“资格论”的反驳：“Jacob 至少写了那么多代码，你怎么能和别人比” “人家那样说是谦虚，你这样就是无耻了”，顿时你就会觉得自己和那些只会从伟大人物身上挑毛病的小人没什么两样。幸运的是，今后我很可能不会以编程为业了，所以这些事情都无所谓了，可以诚恳地说一下自己的经历。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我对 real programmer 的印象始于大学，尽管对于其它专业的人来说我们和修电脑的没什么两样，但专业内部已经隐约有对某种高级事物的崇拜，记得大一时一个同学对我说：“我们现在还学 C，外面早就开始用 Java 了”。那个时候专业内也已经流传了不少程序员的传说，比如某个学长多么厉害，或者微软某个程序员一个人做完了一个项目组的工作。相信很多人都听说过那个故事，大意是一个人电脑坏了，于是找一个电脑高手来修，电脑高手拿来电话，连上电脑，花了整整一夜的时间用 0 和 1 写了一个操作系统，故事的结局是“这个电脑高手去了美国，杳无音信”。当时我听到这个故事的时候半信半疑，居然宁愿相信它是真的！因为如果万一它是真的而我不相信，只能说明我的技术水平或者智商无法理解那个层次的东西，那就太糟糕了。那个时候真的很想变得厉害。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;随着对专业的了解，很快我们就开始嘲笑那种“Java 比 C 新，所以比 C 好”的看法，转而去相信“越底层越牛”的论调，写 C 的比写 Web 的厉害，写汇编的又比写 C 的厉害，为什么呢？因为他们“基础更扎实，更了解原理。” 这种论调发展到一个极致就是：学数学或者物理这种“硬科学”的人如果转行写程序，肯定比我们厉害。他们算法一定比我们好，而且就是这帮家发明的计算机啊我靠。有一段时间隐约觉的别的专业的转行写程序都会比我厉害，哪怕是一个钢琴家——因为他手指灵活打字更快。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;大学里另外一个让我印象极其深刻的传说就是：高手写程序不用 IDE ，都是直接记事本。高手摘花飞叶皆可伤人，谈武器和工具，那就是落了下乘，只有不入流的才整天研究哪个工具更有效率。所以在很长一段时间内我都因为自己没用记事本写程序而怀疑自己的能力，直到后来工作之后我接触到了 Vim ，发现它长得和记事本还真的挺像的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;除此之外，还有对经典书籍的顶礼膜拜，MIT 的 Introduction to Algorithms 和 SICP ，Knuth 的 The Art of Computer Programming ，TCP/IP 详解，以及一些其它的经典操作系统、数据库等方面的书。不啃完这些就说明你天分不够，或者没有热情，还是趁早转行比较好。在我一直很喜欢（现在依然喜欢并推荐）的一篇文章 Teach Yourself Programming in Ten Years  中，作者在结尾推荐了 SICP ，他说：“The book is challenging and will weed out some people who perhaps could be successful with another approach.” 所以尽管我一直没有读完这本书，而且应该也不会去读了，但对它总有一种情结，以至于两年前出国的时候还把它带在身边。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;毕业之后开始做职业程序员，每天都是和程序员打交道，关注的也都是科技新闻，那时候硅谷文化也越来越流行，所以更加向往和崇拜 real programmer 。Joel Spolsky 写过一篇《飙高音》，其中的两段可以算作是对 real programmer 的最佳诠释：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;用许多平庸的程序员取代少数优秀的程序员，这种做法的真正问题在于，不管平庸的程序员工作多长时间，他们做出来的东西，都无法像优秀程序员做得那样好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一流的歌唱演员不管在什么时候，都可以很轻松地唱出高音，而平庸的歌唱演员就是永远做不到这一点。莫扎特的歌剧《魔笛》中有一段著名的咏叹调”Queen of the Night”，音高必须达到F6（女高音的最高音高）才能唱好这首歌，世界上能达到这个标准的女高音都快要绝迹了，而飙不到著名的F6，你就是不能表演”Queen of the Night”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;简单地说，如果你缺乏天赋，那么你再努力，也做不到 real programmer 可以做到的事情，而一个平庸的程序员就是一个烂程序员。这种断言式的文章一直比较能鼓舞人心，那些认为自己比较聪明的人也很喜欢这种说法，但对于我这种一直怀疑自己智商和能力的人来说，它就像一个阴影：万一我真的没办法飙高音怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因为这种对 real programmer 的仰视，从工作以来，不对，是从大学以来，有一个想法一直挥之不去，那就是：I don’t deserve it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;大学里我也有作品拿过奖，但总觉得自己的代码是一坨屎，不配拿那个奖，如果当时有另外一个 real programmer ，肯定轮不到我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;大四找工作的时候，尽管我是通过正规的笔试和面试拿到的 offer ，而且被录用的只有我一个本科生，我还是觉得自己不配得到那份工作，因为没写过 10 万行代码，也不是一个 real programmer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;刚工作的时候我每天从早晨 9 点到晚上 9 点都在公司，有时候周末也去，手头工作做完了就看技术文档，无聊了就用打字软件练习正确的指法，以便编程可以快些。即便这样，我还是怀疑自己对编程的热情，觉得自己离一个 real programmer 越来越远，不适合做程序员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;后来去雅虎北研面试，从早晨 8 点面试到 12 点，第二天又跑去美国的同事视频面试。测试其实已经很严格了，而且我平时没有针对性地刷题或做其它应试准备，但很奇怪，我还是觉得自己能力不行，只是侥幸拿到了 offer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;平时帮别人写代码，或者和别的部门合作，第一个念头就是自己的能力不行。尽管最后项目顺利完成，对方也对我评价不错，但我还是觉得自己不配得到那些夸奖，甚至想：如果他们见到 real programmer ，就不会称赞我的工作了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这种心理还有另外一个负面作用，那就是时时刻刻焦虑，害怕掉队。Jacob 在演讲中也说到：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If the only options are to be amazing or terrible, it leads people to believe they must be passionate about their career, that they must think about programming every waking moment of their life. If they take their eye off the ball even for a minute, they will slide right from amazing to terrible again. That leads people to be working crazy hours at work, to be constantly studying programming topics on their own time, and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这段话准确地说出了我以前的某种状态。我对除了编程之外的很多事情都有兴趣，从生活的角度来看，这其实是一件好事，但我却常常因此有负罪感，因为它们耽误了我编程、看文档和学习新技术的时间。那些事情本来是可以带给我快乐的，但每次做好像都有一种偷偷摸摸的感觉，被别人问到也羞于提起。现在回头看，之前有段时间我的工作和生活其实平衡得很好，但当时我只有不断告诉自己“你本来就平庸”，甚至把自己想象成一个自甘堕落的人才能安心享受，实在太扭曲了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以前我有时还喜欢写点东西，认为自己是在分享，但后来总觉的自己又不是 real programmer ，分享的东西有什么价值呢？而且写文章会耽误编程的时间，程序员文化又特别推崇“务实”，反对“务虚”——写作就是“务虚”，“只会打嘴炮”在程序员群体里面是一个非常严重的侮辱，记得之前看到过一条招聘信息，明确地说“不欢迎经常写博客的人”。事实上写作不止是表达，它反过来还可以帮助思考，很多想法在下笔之前是不存在的，我从中获益良多。而且，“不愿意表达”和“不会表达”有着本质的区别。以前如果一个猥琐不堪、一句话都说不清楚的人过来朝我扔一句”Talk is cheap. Show me the code.”，我立刻就会惭愧不已，甚至认为他或许就是一个 real programmer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以上种种不安和困扰，让我常常觉得自己从性格到业余爱好都不适合做程序员。程序员文化告诉我的是：如果你不是一个 real programmer 或者不在成长为一个 real programmer 的路上，那么你连一个 programmer 都不是。Hacker News 上针对 Jacob 演讲的讨论中，panjaro 说了他自己的经历：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m an example how this myth can destroy you. I was programming for 6 years in normal projects and I thought I was not talented. I left job, came to research degree. Now I realized I’m terrible at maths and advanced algorithm techniques. I think about going back but since it has been 3 months I haven’t worked in a company, I feel I am a very bad programmer and no one will hire me. I’m depressed and paralyzed. All I do all day is look into HN and read articles, think how all these people are talented and I’m so dumb.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;他的描述让我感同身受，当初我也痛恨自己对数学不感兴趣，整天在自习室苦苦复习离散数学和算法，工作之后也常常想要重新回头学习这些“基础知识”。有时候即使你发现在某些工作中算法并不像传说中那么重要，也不能说出来，否则你就是忽视基础，或者你从事的就是程序员当中的低级工作，以至于体会不到算法的重要性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;程序员文化当中“能力决定一切”的态度很多时候都值得商榷，因为除了极少数的计算机科学家，大部分程序员从事的是产品开发工作，而在产品开发中是没办法用一个简单的标准衡量一个程序员的能力的。一个人可能编程能力很强，但他可能执意要实现自己的想法，以至于拖累整个项目。另外，编程能力强的人不一定能从事某些“低级的”、不需要太多智力的工作，那样的工作可能需要大量的耐心，而耐心和传说中的天赋一样，也不是一种人尽可夫的品质。以前看到过一个招聘信息很有意思，里面说希望应聘者“已经结婚，或者至少有过一段长期的恋爱关系”，他们觉得这样的人懂得与别人相处，不太容易是一个鄙视别人工作的 jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我并不是否认大牛的存在，Linus 和 John Carmack 就不用说了，刚毕业在中国雅虎的时候就遇见过一位大牛同事，清华毕业，基督徒，已婚，业余时间喜欢编程和做饭，经常一个人做完整个团队的工作，打字奇快，每次技术分享都有很多人去听，甚至 HR 都因为好奇过去。听众提问的时候，他能清楚讲解某个不常用命令的某个参数的作用，简直就是活的 user manual 。他非常乐于助人，经常看到他在 mail list 里面回答别人问题，从问题的成因分析到解决方案都一一给出，表达非常清晰。让我比较惊讶的是他对很多琐碎的事情也极有耐心，记得公司想要一些人申请专利，周末就看到他在那里专心写申请。另外一个和我比较要好的同事本来觉得自己还算有天分，比我厉害得多，在大学里真的写过 10 万行代码，但见过大牛之后立刻发现自己其实没天分。那个时候他女朋友在外地，他业余时间也就是看看电影写写代码，不想写的时候就打开大牛的 Github 看看，一般都会发现他又有新的 commit ，然后就有动力继续写了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;问题在于并不是所有人都是大牛，整个行业需要的也不止是大牛。举个例子，很多写 PHP 的大概看不起那种 “Wordpress 工程师”，就是只懂 Wordpress 而对 PHP 了解不够深入的人。但很多公司确实就需要做一个小网站，只需要你能开发 Wordpress Theme 就够了，不需要研究更多东西。帮别人开发 Wordpress Theme 完全可以谋生，甚至挣得不少，但他们大概自己也觉得自己不是 real programmer ，所以很少发声。前一段时间有个应用很火，但他们团队的文章开头就说“我们团队中没有大牛”，好像那是很丢人的事情，一定要大牛组成的团队才配开发出好东西？如果抛开其它不谈，“一个人凭借自己的能力养活自己，他就应该得到尊重”，这话听起来没有任何问题，只是一旦牵扯到代码，好像只研究 Wordpress 的工程师就不能见人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;很多公司也迷信只有大神程序员才能做事，所以在招聘的时候会说他们只招聘 Top 1% 的程序员，这其实根本不可能，Joel Spolsky 早就写文章谈过。你不可能招聘到 Top 1% ，只可能招聘到应聘者中的 Top 1%. 我们可以想象一下，最厉害的人可能直接去了 Facebook, Google 或者硅谷的创业公司，差一点的可能选择百度腾讯等国内巨头，或者非常有前景的创业公司，剩下的人才是市场中的人，这里面的 Top 1% 已经不是全部人中的 Top 1% 了。所以看到这种招聘可以评估一下这个公司，如果不是特别牛，完全可以大胆去应聘，因为你在那些愿意应聘这个公司的人当中，可能已经是 Top 1% 了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;其实我非常喜欢这个行业的某些理想主义色彩，过去这几年也认识了不少朋友，发现了不少 thinker ，对我启发很大。可惜我常常感到不舒服，也觉得和这种程序员文化或者 Geek 文化格格不入，虽然很努力去尝试过，但发现还是不行。当然，也可能并不是文化问题，而是因为像我和 panjaro 这样的人胆小浮躁，太在乎别人看法，容易焦虑和抑郁，这样的人大概在任何行业都是 loser 。希望其他人可以活得理直气壮一点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;过去常常希望找到人生目标，而当怀疑自己不是 real programmer 的时候又庆幸生活是一团乱麻，而人生可能并没有意义，不然的话，可能每时每刻都要生活在一条“鄙视链”当中了。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[React Native的技术分享]]></title><description><![CDATA[一个多月前准备的React Native分享，昨天终于给大家分享完毕。M组最近事情很多，还伴随着固定人员离职，还是要求自己不能停啊。课件PDF与实例代码已经放到了Github上。]]></description><link>http://hkongm.github.io//posts/ReactNative</link><guid isPermaLink="false">http://hkongm.github.io//posts/ReactNative</guid><pubDate>Thu, 14 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;一个多月前准备的React Native分享，昨天终于给大家分享完毕。M组最近事情很多，还伴随着固定人员离职，还是要求自己不能停啊。&lt;/p&gt;
&lt;p&gt;课件PDF与实例代码已经放到了Github上，&lt;a href=&quot;https://github.com/hkongm/ReactNativeGuide&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;看这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是自述文件搬运哈。&lt;/p&gt;
&lt;h2 id=&quot;react-native-guide-入门&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-native-guide-%E5%85%A5%E9%97%A8&quot; aria-label=&quot;react native guide 入门 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React Native Guide 入门&lt;/h2&gt;
&lt;p&gt;ReactNative开发入门，制作了一个ListView实现的原生列表App，数据使用fetch从http url获取。&lt;/p&gt;
&lt;p&gt;用于部门内部技术分享的程序demo和讲课pdf。&lt;/p&gt;
&lt;p&gt;代码内含详细改动注释。&lt;/p&gt;
&lt;h3 id=&quot;文件介绍&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D&quot; aria-label=&quot;文件介绍 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;文件介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;0original.js&lt;/code&gt; ReactNative init生成的原始&lt;code class=&quot;language-text&quot;&gt;index.ios.js&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;1course.js&lt;/code&gt; 简单的文本改动&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;2singleRow.js&lt;/code&gt; 单行列表，字符串常量&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;3singleRowWithData.js&lt;/code&gt;单行列表，数据变量&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;4multiRowWithArray.js&lt;/code&gt; 多行列表，引入&lt;code class=&quot;language-text&quot;&gt;List View&lt;/code&gt;，使用数组数据&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;5multiRowWithFetch.js&lt;/code&gt; 多行列表，使用&lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt;获取URL数据接口&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;6multiRowWithFetchUE.js&lt;/code&gt; 用户体验优化，在加载完成前加入loading的View。&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[非阻塞渲染加载CSS的技巧]]></title><description><![CDATA[这篇文章介绍了一个“防止‘样式表加载行为导致页面渲染被阻塞’的异步加载样式表”的技术。]]></description><link>http://hkongm.github.io//posts/NonBlocking</link><guid isPermaLink="false">http://hkongm.github.io//posts/NonBlocking</guid><pubDate>Mon, 13 Apr 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;忙劲儿过去了，目前压力还好，今天抽空翻了一篇文章，表明我还活着～&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://keithclark.co.uk/articles/loading-css-without-blocking-render/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Loading CSS without blocking render&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者提示：当前，不要将此技巧用于产品化，主要是兼容性问题。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章介绍了一个“防止‘样式表加载行为导致页面渲染被阻塞’的异步加载样式表”的技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这项技术的基本原则并不是新知识。例如Fliamentgroup发布过的&lt;a href=&quot;https://github.com/filamentgroup/loadCSS&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;loadCSS&lt;/a&gt;和&lt;a href=&quot;http://www.filamentgroup.com/lab/font-loading.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;fonts&lt;/a&gt;。我的这篇文章用来阐述我的&lt;strong&gt;如何实现非阻塞的加载资源&lt;/strong&gt;的想法。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;异步下载样式表这个技巧，源自于使用&lt;code class=&quot;language-text&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt;元素的同时给他设置一个不合法的&lt;code class=&quot;language-text&quot;&gt;media&lt;/code&gt;属性（我自己在使用&lt;code class=&quot;language-text&quot;&gt;media=&amp;quot;none&amp;quot;&lt;/code&gt;，但其他的任何值都是可以的）的方法。当媒体查询判断这个值为假时，浏览器仍旧会下载样式表文件，但当整个页面加载渲染完毕时，这部分样式内容不会被应用到页面中。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;css.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一旦，样式表被下载完成，&lt;code class=&quot;language-text&quot;&gt;media&lt;/code&gt;属性必须被设置为一个合法的值，这样页面才会应用这些样式定义。&lt;code class=&quot;language-text&quot;&gt;onload&lt;/code&gt;事件可以用来完成这项任务，将&lt;code class=&quot;language-text&quot;&gt;media&lt;/code&gt;属性设置为&lt;code class=&quot;language-text&quot;&gt;all&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;css.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;if(media!=&apos;all&apos;)media=&apos;all&apos;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用这种方法加载CSS，会比一般的方式更快速的为用户呈现出页面的内容。重要CSS仍然可以使用通常的阻塞加载方式（或者将这些样式使用inline的方式写在页面中以获得更好的性能表现），非重要的样式部分可以渐进下载，在稍后进行转换/渲染的过程。&lt;/p&gt;
&lt;p&gt;这项技术使用了Javascript，在不支持Javascript的浏览器中，你可以在外面套个&lt;code class=&quot;language-text&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;标签来实现。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;css.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;if(media!=&apos;all&apos;)media=&apos;all&apos;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;noscript&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;css.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;noscript&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这项技术有个副作用。一旦无阻塞样式文件下载完成，文档中所有被影响的元素会进行重绘操作。在页面中插入新的样式会触发页面内容的重排操作。当页面第一次被加载时，这真的是个问题。你需要考虑到这种情况，对潜在的性能影响有个预判。&lt;/p&gt;
&lt;h3 id=&quot;使用非阻塞css技术加载字体&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8%E9%9D%9E%E9%98%BB%E5%A1%9Ecss%E6%8A%80%E6%9C%AF%E5%8A%A0%E8%BD%BD%E5%AD%97%E4%BD%93&quot; aria-label=&quot;使用非阻塞css技术加载字体 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;使用非阻塞CSS技术加载字体&lt;/h3&gt;
&lt;p&gt;字体是个页面首次渲染的性能影响点，他们属于阻塞资源，并且当字体在下载时，浏览器已经在隐形（invisible）渲染他们了。使用上面介绍的无阻塞技术的话，让“在后台下载包含字体数据的样式表”这件事成为可能，实现非阻塞页面渲染：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;main.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;font.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;if(media!=&apos;all&apos;)media=&apos;all&apos;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;font.css&lt;/code&gt;包含了一套由base64编码的WOFF版本的&lt;a href=&quot;http://www.google.com/fonts/specimen/Merriweather&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Merriweather&lt;/a&gt;字体。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Merriweather&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; normal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 400&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Merriweather&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&apos;data:application/x-font-woff;charset=utf-8;base64,...&apos;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;main.css&lt;/code&gt; 包含了站点所需要的所有样式规则。下面是关于字体的声明：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Merriweather&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Lucida Grande&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当&lt;code class=&quot;language-text&quot;&gt;font.css&lt;/code&gt;正在下载时，第一个匹配的fallback字体（在本例中是Lucida Grande）被用来渲染页面内容。当字体样式表下载完成并被应用时，才会使用Merriweather来渲染。注意：字体的变化会导致页面触发重排操作。&lt;/p&gt;
&lt;p&gt;3G网络下，我在Chrome中使用&lt;a href=&quot;https://keithclark.github.io/gadebugger/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Google Analytics Debugger站点&lt;/a&gt;进行阻塞和非阻塞方式的测试。结果显示，使用无阻塞方式的页面&lt;code class=&quot;language-text&quot;&gt;DOMContentLoaded&lt;/code&gt;事件的触发时间比使用传统阻塞方式的页面要快450ms：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/nonblocking/non-blocking-vs-blocking-graph.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;模拟3G网络下的瀑布图，上面为阻塞字体加载，下面为非阻塞字体加载&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;将页面部署到线上，使用&lt;a href=&quot;http://www.webpagetest.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;webpagetest&lt;/a&gt;测试3G连接的加载时间线如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/nonblocking/non-blocking-vs-blocking-timeline1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;3G网络下的时间线，上面为阻塞字体加载，下面为非阻塞字体加载&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;两种方法都在2.8秒内完成了整个页面，但非阻塞方法比传统阻塞方法提前1秒触发了页面渲染。我们把&lt;code class=&quot;language-text&quot;&gt;main.css&lt;/code&gt;的内容通过inline的方式写到页面中再次进行同一个测试，结果显示：我们获得了0.7秒的提升。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/nonblocking/non-blocking-vs-blocking-timeline2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;3G网络下的时间线（主样式inline），上面为阻塞字体加载，下面为非阻塞字体加载&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这项技术不能很好的适应字体（译者注：作者指的是浏览器兼容性差），但我建议严密关注新的CSS字体加载模块，它会大幅提升字体加载性能。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot; aria-label=&quot;总结 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;总结&lt;/h3&gt;
&lt;p&gt;字体加载只是非阻塞加载技术的其中一个例子，该技术还可以应用到其他方面，比如从核心CSS中分离出Javascript增强样式。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[技术委员会入选+参与职级评审]]></title><description><![CDATA[技术部今年第一个大动作，成立了技术委员会，会负责一些大项目评审啊，员工晋升职级评审啊，新员工面试及定级啦类似的工作。有幸入选，不过前端只有俺一个，显得形单影只啊。]]></description><link>http://hkongm.github.io//posts/Busy</link><guid isPermaLink="false">http://hkongm.github.io//posts/Busy</guid><pubDate>Tue, 24 Mar 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;技术部今年第一个大动作，成立了技术委员会，会负责一些大项目评审啊，员工晋升职级评审啊，新员工面试及定级啦类似的工作。有幸入选，不过前端只有俺一个，显得形单影只啊。&lt;/p&gt;
&lt;p&gt;技术学院前端讲师的头衔，考虑让贤，这两天员工晋升评审，占用了大量时间和精力。&lt;/p&gt;
&lt;p&gt;春节后，M这边的需求陡增，资源着实不够用。比如，轻互动这边突然一下来两个补量的需求，客户还非常难缠，不给钱还要求颇多，轻互动分级势在必行。&lt;/p&gt;
&lt;p&gt;年初，为了配合公司品牌十周年，各专题也一股脑扔过来了，UI耗时2-3周的，各种动效都靠嘴来描述的，占去我2个人2周的时间，内部需求比外部商业需求更甚啊。&lt;/p&gt;
&lt;p&gt;项目不能等待，无奈自己要上一些中小型项目了，小的还好说，速度做完速度交工。中型的，（chou shi jian）速度做完，交工后，修改频率和量都不小，check的时候就不能仔细点么？不能一次说清楚么？&lt;/p&gt;
&lt;p&gt;最近一段时间，技术上没有任何进步，RSS积累了不少的文章还没来得及读，喷了。&lt;/p&gt;
&lt;p&gt;焦头烂额啊。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[春节前后的动向]]></title><description><![CDATA[过了个春节，好久没更新文章了，节前+节后综合症，状态始终不对，慢慢调整回来吧。]]></description><link>http://hkongm.github.io//posts/2015ChineseNewYear</link><guid isPermaLink="false">http://hkongm.github.io//posts/2015ChineseNewYear</guid><pubDate>Sat, 28 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;过了个春节，好久没更新文章了，节前+节后综合症，状态始终不对，慢慢调整回来吧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;儿子会走了，长了上门牙&lt;/li&gt;
&lt;li&gt;一家三口都病了，母子俩是呼吸系统，俺是发烧晕倒（夜里四点多）&lt;/li&gt;
&lt;li&gt;终于跌跌撞撞把年过完了&lt;/li&gt;
&lt;li&gt;初四打了6个小时台球&lt;/li&gt;
&lt;li&gt;初六中午给儿子做了周岁生日&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上班后，开始开发一直构思已久的基于markdown的带预览功能的编辑器，支持设备选择（相应的CSS）和模板选择。以期将来能为网站后台使用，提升编辑们的发文章效率，让富文本编辑器见鬼去吧。&lt;/p&gt;
&lt;p&gt;2015年是专题的一年，上班这几天，大型专题需求来袭，未来将有更多，前端是否需要单独开设个专题组呢……有些效果给UED去搞不太放心的说&lt;/p&gt;</content:encoded></item><item><title><![CDATA[New React Devtool！]]></title><description><![CDATA[今天在清RSS时，无意中瞥到个标题，就是这个了！New React Devtool！全新的React开发工具！看Demo gif很华丽！自己装了后更华丽！！！]]></description><link>http://hkongm.github.io//posts/ReactDevTool</link><guid isPermaLink="false">http://hkongm.github.io//posts/ReactDevTool</guid><pubDate>Sat, 28 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今天在清RSS时，无意中瞥到个标题，就是这个了！New React Devtool！&lt;/p&gt;
&lt;p&gt;全新的React开发工具！看Demo gif很华丽！&lt;/p&gt;
&lt;p&gt;自己装了后更华丽！！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/blog/2015/08/03/new-react-devtools-beta.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;介绍博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装方法&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://s3.amazonaws.com/github-cloud/releases/12601374/1f8a3820-39ec-11e5-9c08-4479162af5b7.crx?response-content-disposition=attachment%3B%20filename%3Dreact-devtools-chrome.crx&amp;#x26;response-content-type=application/octet-stream&amp;#x26;AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&amp;#x26;Expires=1438853842&amp;#x26;Signature=TW8apTt6p5UF8BIvRu2q7cZPBDY%3D&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt;下载crx，打开chrome的&lt;code class=&quot;language-text&quot;&gt;chrome://extensions&lt;/code&gt;后，把crx拖进去就可以让React爽飞～&lt;/p&gt;</content:encoded></item><item><title><![CDATA[为GHPages添加了自己的域名]]></title><description><![CDATA[如何把自己的域名配到 GHPages 上。]]></description><link>http://hkongm.github.io//posts/GHPagesAddDomainName</link><guid isPermaLink="false">http://hkongm.github.io//posts/GHPagesAddDomainName</guid><pubDate>Mon, 09 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;参考了&lt;a href=&quot;https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在GHPages的项目里添加一个&lt;code class=&quot;language-text&quot;&gt;CNAME&lt;/code&gt;文件，&lt;strong&gt;注意要全大写&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其中只写上你要制定的域名&lt;code class=&quot;language-text&quot;&gt;abc.com&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后去你的域名服务商，登陆域名后台，添加几条A记录。&lt;/p&gt;
&lt;p&gt;A记录&lt;code class=&quot;language-text&quot;&gt;@&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;www&lt;/code&gt;指向到&lt;code class=&quot;language-text&quot;&gt;192.30.252.153&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;192.30.252.154&lt;/code&gt;两个IP，注意，每个域名要添加两条A记录，因为是两个IP哦。&lt;/p&gt;
&lt;p&gt;随后用&lt;code class=&quot;language-text&quot;&gt;dig&lt;/code&gt;命令验证解析的结果。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;dig&lt;/span&gt; example.com +nostats +nocomments +nocmd
example.com.   &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;  IN  A &lt;span class=&quot;token number&quot;&gt;192.30&lt;/span&gt;.252.153
example.com.   &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;  IN  A &lt;span class=&quot;token number&quot;&gt;192.30&lt;/span&gt;.252.154&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;稍等，访问你自己的域名就可以正常访问GHPages服务啦。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[阿里云网站建站始末]]></title><description><![CDATA[上周，阿里云推出了2年免费主机产品，马上申请了一个，用于本站。顺手买了个.me的域名。于是，噩梦就开始了。]]></description><link>http://hkongm.github.io//posts/BeianSite</link><guid isPermaLink="false">http://hkongm.github.io//posts/BeianSite</guid><pubDate>Tue, 03 Feb 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;上周，阿里云推出了2年免费主机产品，马上申请了一个，用于本站。顺手买了个.me的域名。&lt;/p&gt;
&lt;p&gt;于是，噩梦就开始了。&lt;/p&gt;
&lt;p&gt;主机搞定后，文件上传成功，做新域名解析，一切正常，结果不到半天的时间，提示我，域名需要备案……&lt;/p&gt;
&lt;p&gt;好吧，在各种阿里云、万网各种庞杂的系统中跳来跳去，域名备案开始了，提交了个人信息后，让我输入备案密码，同时给了我个湘ICP备XXXXXXXXX的号。&lt;/p&gt;
&lt;p&gt;我艹，晕菜，密码在哪儿？帮助页面找，在线客服问（没有人工，全是机器人）无果，而且没有找到万网和阿里云的客服电话位置（恕我愚钝）。以为可能是在审核中？&lt;/p&gt;
&lt;p&gt;1.5天以后，发现还卡在这里，没办法，继续深挖原因。&lt;/p&gt;
&lt;p&gt;终于发现了正确答案：登陆工信部网站，选择湖南省，右下角查询备案信息，选择域名查询方式，输入域名后和验证码后，备案信息出来了。&lt;/p&gt;
&lt;p&gt;结果显示：该域名在13年3月被XXX备案过，已经记录在案，所以我无论如何也拿不到密码。我在正常渠道买了域名，说明这个域名他不用了，回归互联网大池子，但备案信息没有同步更新。&lt;/p&gt;
&lt;p&gt;在网站下载了一个word文档（各地方网站的注销流程、文档是不统一的，我想效率也不尽相同），要求注销备案信息，签了字，后传真过去，没想到那边工作效率还挺高的，文档里说要10个工作日，我这个业务只花了2个工作日，中间隔了一个周末就注销信息成功了。&lt;/p&gt;
&lt;p&gt;回万网的备案系统继续下一步吧，很顺利，1天后，域名备案（还是实名认证？不清楚，管他呢）成功，正在我兴冲冲的敲了域名回车后，屏幕出现了网站不能访问，需要备案的提示，当场喷血……&lt;/p&gt;
&lt;p&gt;那就再进行网站备案吧……填写信息后进行首次备案，被打回，说是网站内容不能包括技术、社区、博客之类的字眼，那么好，我随便编个再提交；又打回来了，原因是北京市不允许.me的域名网站备案，我擦这是啥情况？去阿里云的客服系统留言（只能留言……无电话），要求域名退款！（太TM折腾了）&lt;/p&gt;
&lt;p&gt;几个小时后，阿里云来电话了，说让我选择其他省市进行备案，只要除了吉林（吉林也不允许.me域名）就行，那么好，我选了沈阳，老婆大人的家地址，但是……必须要填写固定电话，这年头家里都是人手一部手机了，没有固话啊，随便填了一个……&lt;/p&gt;
&lt;p&gt;几个小时后，阿里云来电话了，说固话找不到我的人，手机可以找到，又给我驳回了，我就怒了，“你们客服说的让我随便选择非北京的省市啊！”，对方答：“辽宁省是要求必须填写固话的，您可以选择浙江或者吉林”。我一听，吉林貌似不能.me域名，这次直接选浙江吧，2个小时后，电话通知，初审终于过了~。&lt;/p&gt;
&lt;p&gt;下面是邮寄材料和拍照~&lt;/p&gt;</content:encoded></item><item><title><![CDATA[给网站添加了媒体查询支持移动设备访问]]></title><description><![CDATA[稍微的添加了几个媒体查询，让手机看博客舒服一些。个人域名和 Gitlab 落地。]]></description><link>http://hkongm.github.io//posts/AddCrossPlayform</link><guid isPermaLink="false">http://hkongm.github.io//posts/AddCrossPlayform</guid><pubDate>Fri, 30 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;稍微的添加了几个媒体查询，让手机看博客舒服一些。&lt;/p&gt;
&lt;p&gt;上周到本周都在写总结，听总结，技术团队大会更是学到不少东西。回头有时间写个东西出来。&lt;/p&gt;
&lt;p&gt;万网退出免费的2年主机，申请了一个，还买了个域名，结果……&lt;/p&gt;
&lt;p&gt;这个域名2年前被备案了，我还得申请注销先，审批中，需要10天，太折腾了……&lt;/p&gt;
&lt;p&gt;公司技术部内网的Git服务器终于弄好了，基于Gitlab，好玩哇，这回兄弟们又有的玩了。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[给Jekyll博客重新装修]]></title><description><![CDATA[过了个春节，好久没更新文章了，节前+节后综合症，状态始终不对，慢慢调整回来吧。]]></description><link>http://hkongm.github.io//posts/ThemeBlog</link><guid isPermaLink="false">http://hkongm.github.io//posts/ThemeBlog</guid><pubDate>Tue, 20 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;觉得Jekyll默认的样式不爽，自己搞了一套。顺便熟悉下自定义站点的一些环境变量和liquid的用法。&lt;/p&gt;
&lt;p&gt;还需要细节再优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;date变量&lt;code class=&quot;language-text&quot;&gt;{ { post.date | date: &amp;quot;%Y年%m月%d日&amp;quot; } }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;site.categories&lt;/code&gt;的不遍历，试了&lt;code class=&quot;language-text&quot;&gt;item.name&lt;/code&gt;不行，&lt;code class=&quot;language-text&quot;&gt;item.title&lt;/code&gt;也不行，SO搜了下居然是&lt;code class=&quot;language-text&quot;&gt;item.first&lt;/code&gt;有意思&lt;/li&gt;
&lt;li&gt;文章页正文定了650px的宽，for UX。右边加了同类别的文章列表&lt;/li&gt;
&lt;li&gt;使用&lt;code class=&quot;language-text&quot;&gt;site.related_posts&lt;/code&gt;列出了相关文章&lt;/li&gt;
&lt;li&gt;使用循环后if&lt;code class=&quot;language-text&quot;&gt;post.categories == page.categories&lt;/code&gt;，列出了同类下的文章&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17118551/generating-a-list-of-pages-not-posts-in-a-given-category&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;建立分类列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用了&lt;a href=&quot;http://www.colourlovers.com/palette/3622259/Lunar_Eclipse&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;lunar eclipse配色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code class=&quot;language-text&quot;&gt;limit&lt;/code&gt; 限制循环数量，使用 &lt;code class=&quot;language-text&quot;&gt;倒序&lt;/code&gt; 排列 &lt;code class=&quot;language-text&quot;&gt;for post in site.related_posts reversed limit:4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;20日更新内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;感谢dribbble上&lt;a href=&quot;https://dribbble.com/shots/1091493-You-know-his-usual-malarky&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;牛逼的设计&lt;/a&gt;提供配色。&lt;/li&gt;
&lt;li&gt;文章页排版修改&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;{ %assign tags = post.tag | split: &amp;#39; &amp;#39;% }&lt;/code&gt;用来拆分字符串问数组&lt;/li&gt;
&lt;li&gt;首页加入了文章meta，标签反白显示&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[如何使用Yeoman来创建你的下一个Web项目]]></title><description><![CDATA[Yeoman这个概念（是个概念，若干工具的集合）已经被提出很久了，很久以前也有一些文章在介绍了，这里是15年新鲜出炉的一篇介绍文章，里面配图较多，非常直观，量不大，就稍微翻译了下。]]></description><link>http://hkongm.github.io//posts/YeomanGuide</link><guid isPermaLink="false">http://hkongm.github.io//posts/YeomanGuide</guid><pubDate>Tue, 20 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Yeoman这个概念（是个概念，若干工具的集合）已经被提出很久了，很久以前也有一些文章在介绍了，这里是15年新鲜出炉的一篇介绍文章，里面配图较多，非常直观，量不大，就稍微翻译了下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://wes.is/2015/01/13/how-to-use-yeoman-to-scaffold-your-next-web-app/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;How to Use Yeoman to Scaffold Your Next Web App&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/yeoman-logo.png&quot; alt=&quot;yeoman&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在你决定要做一个牛逼的Web App，但你不知道从哪里下手。&lt;/p&gt;
&lt;p&gt;你需要考虑：客户端段依赖（bower）、服务端依赖（npm/node）、测试用例、CSS框架/CSS预处理器、HTML模板引擎、JS框架、构建工具、语法验证器、文件压缩方案等等。当然，还要在这些基础上，规划如此多的文件该如何存放，以保证它们能正常工作。&lt;/p&gt;
&lt;p&gt;这些无效的工作要花去我们若干个小时，苦逼啊。&lt;/p&gt;
&lt;h2 id=&quot;让yeoman来拯救你！&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%AE%A9yeoman%E6%9D%A5%E6%8B%AF%E6%95%91%E4%BD%A0%EF%BC%81&quot; aria-label=&quot;让yeoman来拯救你！ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;让Yeoman来拯救你！&lt;/h2&gt;
&lt;p&gt;你是否有过，明明商品躺在你的购物车里直接去结账就OK了，但你还在拿着购物清单继续满世界找你的欲购商品的二逼经历？&lt;/p&gt;
&lt;p&gt;这就是Yeoman要帮你完成的。它提供了一个地方让你可以选择所有的工具来构建你完美的开发环境。你所做的只是选择你需要的部分，Yeoman会帮你把工具文件组织妥当，让你随时可以开始开发工作。Yeoman提供一个名叫“yo”的“生成器（generators）”命令来搭建你的App。&lt;/p&gt;
&lt;h3 id=&quot;我怎么开始？&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%88%91%E6%80%8E%E4%B9%88%E5%BC%80%E5%A7%8B%EF%BC%9F&quot; aria-label=&quot;我怎么开始？ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;我怎么开始？&lt;/h3&gt;
&lt;p&gt;如果你还没有安装node/npm，你需要先安装好它们。打开你的终端，输入下面的命令来查看是否已经安装妥当。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node -v &amp;amp;&amp;amp; npm -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有安装，访问&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;node官方站点&lt;/a&gt;来获得和安装它，安装Node的同时，&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;npm&lt;/a&gt;也会一起安装。&lt;/p&gt;
&lt;p&gt;一旦你安装好了node / npm 你需要在全局环境安装几个命令行工具，尤其是接下来你需要使用的 &lt;strong&gt;Yeoman&lt;/strong&gt;，&lt;strong&gt;Bower&lt;/strong&gt;和作为构建工具的&lt;strong&gt;Grunt&lt;/strong&gt;或者&lt;strong&gt;Gulp&lt;/strong&gt;。我推荐你两个都安装，看看哪个更适合你。下面的命令，将会帮你安装上面这些工具。注意，如果安装过程中出现了错误，你需要在命令前加入&lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt;来启用管理员权限执行这行命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g yo bower grunt-cli gulp  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一切准备就绪，让我们开始吧。&lt;/p&gt;
&lt;h3 id=&quot;使用生成器&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BD%BF%E7%94%A8%E7%94%9F%E6%88%90%E5%99%A8&quot; aria-label=&quot;使用生成器 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;使用生成器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/kickstarting-nodejs-projects-with-yeoman-5-638.jpg&quot; alt=&quot;生成器&quot;&gt;&lt;/p&gt;
&lt;p&gt;让我事先说明一件事情，这里有&lt;a href=&quot;http://yeoman.io/generators/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;大量的Yeoman生成器&lt;/a&gt;用以创建你想要的任意工具组合。下面的例子中，我将向你展示如何构建一个包含JQuery、Bootstrap（使用Stylus CSS预处理器）、Jade模板引擎、Jasmin / Mocha测试框架并使用Gulp构建工具的Angular App。&lt;/p&gt;
&lt;p&gt;首先，让我们安装Angular和Gulp的Yeoman生成器：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g generator-gulp-angular&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，我们建立一个新目录，并进入到这个目录中：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; myapp &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; myapp  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入&lt;code class=&quot;language-text&quot;&gt;yo&lt;/code&gt;。这会激活Yeoman问你想要做什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-28-37-AM-1.png&quot; alt=&quot;激活Yeoman&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上面的截图中，几个选项被显示出来。这些是不同的Yeoman生成器。在我们这个例子中，我们去选择Gulp Angular，当前的选择会被绿色高亮，敲回车。&lt;/p&gt;
&lt;p&gt;下一步，选择你要使用的Angular的版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-32-42-AM.png&quot; alt=&quot;Angular版本&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择你的Angular模块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-33-00-AM.png&quot; alt=&quot;Angular模块&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择项目中你欲使用的jQuery版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-33-34-AM.png&quot; alt=&quot;jQuery版本&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择REST资源库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-36-53-AM.png&quot; alt=&quot;REST资源库&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择一个路由器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-39-04-AM.png&quot; alt=&quot;路由器&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择你喜欢的UI框架。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-39-53-AM.png&quot; alt=&quot;UI框架&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择UI框架组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-40-50-AM.png&quot; alt=&quot;UI框架组件&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择你的CSS预处理器。而我偏爱Stylus :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-41-52-AM.png&quot; alt=&quot;CSS预处理器&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择Javascript预处理器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-42-56-AM.png&quot; alt=&quot;Javascript预处理器&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择一个HTML模板引擎。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-44-20-AM.png&quot; alt=&quot;HTML模板引擎&quot;&gt;&lt;/p&gt;
&lt;p&gt;到这里就OK了。让Yeoman处理省下的事情吧。&lt;/p&gt;
&lt;p&gt;从这里开始，Yeoman会调用&lt;code class=&quot;language-text&quot;&gt;bower install&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;来安装所有的依赖，最终创建好你的App。过程中如果遇到了访问错误（access error），你可能需要自己运行&lt;code class=&quot;language-text&quot;&gt;sudo npm install&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面进入到了真正有意思的部分。一旦你的这些依赖安装完成，在你的App的主目录，输入下面的命令来启用你的App。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;    gulp serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你的终端应该显示的如下图。敲入命令后，gulp会创建一个支持监控修改（watch）的服务器，使用localhost的3000端口即可访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-12-52-32-AM-1.png&quot; alt=&quot;gulp启动&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序会自动调用默认浏览器访问这个gulp监控服务器，浏览器会呈现一个临时的前端页面，里面包含了你安装的所有依赖和工具的简要介绍和链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-1-05-41-AM-1.png&quot; alt=&quot;自动浏览器&quot;&gt;&lt;/p&gt;
&lt;p&gt;用你常用的文本编辑器打开当前项目目录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-1-08-08-AM.png&quot; alt=&quot;打开目录&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们来看看文件结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-1-10-09-AM-1.png&quot; alt=&quot;查看文件结构&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;gulp的所见即所得&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gulp%E7%9A%84%E6%89%80%E8%A7%81%E5%8D%B3%E6%89%80%E5%BE%97&quot; aria-label=&quot;gulp的所见即所得 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gulp的所见即所得&lt;/h3&gt;
&lt;p&gt;当我们使用&lt;code class=&quot;language-text&quot;&gt;gulp serve&lt;/code&gt;命令启动了一个支持修改监控的服务器后，当我们修改文件并保存后，浏览器会立即刷新，不用我们自己去手动刷新才能看到效果。&lt;/p&gt;
&lt;p&gt;比如，我们修改了Stylus的源文件从：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-1-19-55-AM.png&quot; alt=&quot;stylus从&quot;&gt;&lt;/p&gt;
&lt;p&gt;改为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-1-19-55-AM.png&quot; alt=&quot;stylus到&quot;&gt;&lt;/p&gt;
&lt;p&gt;当保存后，浏览器会自动刷新成下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wes.is/content/images/2015/01/Screen-Shot-2015-01-13-at-1-22-23-AM.png&quot; alt=&quot;自动刷新&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;嘿！yeoman！&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%98%BF%EF%BC%81yeoman%EF%BC%81&quot; aria-label=&quot;嘿！yeoman！ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;嘿！Yeoman！&lt;/h2&gt;
&lt;p&gt;如果你想加快你的项目构建速度，我强烈建议你把Yeoman加入到你的开发工作流中。你可以因此节省许多时间，远离烦恼。把更多的精力用在有意义的事情上。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[第一个iOS应用]]></title><description><![CDATA[上周日，带着iPad去北工大图书馆陪领导，她干她的活儿，我打开慕课网开始看[Swift开发iOS的教程](http://www.imooc.com/learn/173)。这图书馆里让我翻到了iOS7开发实战的书！挺新的嘛，有点出人意料，当然跟它一起摆着的还有iOS4……]]></description><link>http://hkongm.github.io//posts/SwiftTgfcer</link><guid isPermaLink="false">http://hkongm.github.io//posts/SwiftTgfcer</guid><pubDate>Thu, 15 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;有一搭没一搭的学下iOS&lt;/p&gt;
&lt;p&gt;上周日，带着iPad去北工大图书馆陪领导，她干她的活儿，我打开慕课网开始看&lt;a href=&quot;http://www.imooc.com/learn/173&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Swift开发iOS的教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这图书馆里让我翻到了iOS7开发实战的书！挺新的嘛，有点出人意料，当然跟它一起摆着的还有iOS4……&lt;/p&gt;
&lt;p&gt;视频里，老师讲得挺好，就是这口音有点。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一感觉咋这么像VB？Storyboard部分。故事板这种开发方式很颠覆！作为前端接受起来应该还算快的了，真的挺爽！&lt;/li&gt;
&lt;li&gt;MVC虽然没有深入去讲，但隐约可以窥探一些MVC的概念了，ViewContoller+DataSource+Delegate，视频里老师不会讲细节，这部分还要自己去看书才行了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下午花了1个小时整出一个最简单的iOS App，地址&lt;a href=&quot;https://github.com/hkongm/SwiftTGFCer&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/hkongm/SwiftTGFCer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;自己学的好杂，啥都有……待学习的知识依然排队中，慢慢消化吧&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[给新手（笨笨）准备的Flux介绍]]></title><description><![CDATA[作为一个脑袋不咋灵光的人，在我挣扎着学习Flux时，希望有人能告诉我这篇文章里的内容。这不是一篇简单的、好的文档，而且它还有许多需要改正的部分内容。这篇文章，紧接着上篇《给新手（笨笨）准备的ReactJS介绍》]]></description><link>http://hkongm.github.io//posts/FluxForStupidPeople</link><guid isPermaLink="false">http://hkongm.github.io//posts/FluxForStupidPeople</guid><pubDate>Wed, 14 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://blog.andrewray.me/flux-for-stupid-people/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://blog.andrewray.me/flux-for-stupid-people/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;篇幅过长，没有阅读（&lt;a href=&quot;http://zhidao.baidu.com/link?url=J-CJXq3dC4oPgQacI5pukD_S4-9HagnMMGB4YJT9hUFufaHxH7enybUz7e6vBEpW4IyV8wOZqNLvl_CMEYs6Jq&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TL;DR&lt;/a&gt;）。作为一个脑袋不咋灵光的人，在我挣扎着学习Flux时，希望有人能告诉我这篇文章里的内容。这不是一篇简单的、好的文档，而且它还有许多需要改正的部分内容。&lt;/p&gt;
&lt;p&gt;这篇文章，紧接着上篇《给新手（笨笨）准备的ReactJS介绍》&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;我该用Flux么？&lt;/p&gt;
&lt;p&gt;如果你的应用要处理一些&lt;strong&gt;动态数据&lt;/strong&gt;的话，那么答案是“&lt;strong&gt;是的&lt;/strong&gt;”，你很可能应该用Flux。&lt;/p&gt;
&lt;p&gt;如果你的应用只是不用共享状态的&lt;strong&gt;静态页面&lt;/strong&gt;，且你永远不需要保存或者更新数据，那么答案是“&lt;strong&gt;不&lt;/strong&gt;”，Flux不会给你带来任何提升。&lt;/p&gt;
&lt;p&gt;为什么用Flux？&lt;/p&gt;
&lt;p&gt;小幽默下，因为Flux本是个难以理解的概念，为什么你还把问题整的更加复杂？&lt;/p&gt;
&lt;p&gt;90%的iOS应用通过&lt;strong&gt;table view呈现数据&lt;/strong&gt;。iOS工具包把数据呈现与数据模型定义的非常好，以至于让开发过程变得很简单。&lt;/p&gt;
&lt;p&gt;在前端，我们没有如iOS那样的便利条件，相反的&lt;strong&gt;我们有个大麻烦&lt;/strong&gt;，那就是没人知道怎么正确的构建一个前端应用程序。说真的，我在这个行业工作了几年了，从没有一个“最佳实践”讲授这方面内容的。相对应的“库”倒是很多，jQuery？Angular？Backbone？Handlebars？这些库都避开了数据流（data flow）的处理，数据流该怎么处理始终困扰着我们。&lt;/p&gt;
&lt;p&gt;Flux是啥？&lt;/p&gt;
&lt;p&gt;Flux是一个描述了对指定的事件和监听器进行“单向”数据流处理的一个概念词。所以根本没有名叫Flux的这么个库，但你需要的是&lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/Dispatcher.js&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Flux分配器&lt;/a&gt;（Flux Dispatcher）和任何一个Javascript&lt;a href=&quot;http://notes.jetienne.com/2011/03/22/microeventjs.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;事件库&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://notes.jetienne.com/2011/03/22/microeventjs.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;官方文档&lt;/a&gt;被写得很意识流（stream of conciousness），而且它并不适合开始学习Flux。一旦你理解了Flux，再去看文档会感觉融会贯通。&lt;/p&gt;
&lt;p&gt;不要尝试去比较Flux和MVC架构，那会让你更加困惑。&lt;/p&gt;
&lt;p&gt;好了，让我们开始吧，为了&lt;strong&gt;解释Flux的概念&lt;/strong&gt;我会用例子带你了解它们。&lt;/p&gt;
&lt;h2 id=&quot;1-视图分派了一个操作&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%E8%A7%86%E5%9B%BE%E5%88%86%E6%B4%BE%E4%BA%86%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C&quot; aria-label=&quot;1 视图分派了一个操作 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 视图“分派了”“一个操作”&lt;/h2&gt;
&lt;p&gt;一个&lt;strong&gt;分配器（dispatcher）&lt;/strong&gt;是基于一个事件系统使用的。它被用来广播触发的事件并注册事件的回调，而且有且&lt;strong&gt;只有一个全局分配器&lt;/strong&gt;。你应该使用Facebook &lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/Dispatcher.js&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Dispatcher Library&lt;/a&gt;。它非常容易初始化：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; AppDispatcher &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dispatcher&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让我们做个“new”按钮，用来像列表中添加个事项。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;createNewItem &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;New Item&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在按钮被点击时发生了什么？你的视图&lt;strong&gt;派发了一个特定的事件&lt;/strong&gt;，事件中包含着事件名和新事项的数据，如下代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;createNewItem&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;evt&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  AppDispatcher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    eventName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;new-item&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    newItem&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Marco&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// example data&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-存储响应了分配器事件&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%E5%AD%98%E5%82%A8%E5%93%8D%E5%BA%94%E4%BA%86%E5%88%86%E9%85%8D%E5%99%A8%E4%BA%8B%E4%BB%B6&quot; aria-label=&quot;2 存储响应了分配器事件 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. “存储”响应了分配器事件&lt;/h2&gt;
&lt;p&gt;跟Flux一样，“Store”（存储）也是Facebook发明的一个词。在我们的应用程序中，我们需要为列表指定一个集合来存放逻辑和数据。这就是我们的“Store”，我们暂且称之为ListStore。&lt;/p&gt;
&lt;p&gt;一个store作为一个单例模型，这意味着你不应该使用&lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt;来声明它。ListStore是一个全局的对象，如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 全局的对象描述了数据和逻辑&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ListStore &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 模型数据的真实数据集合&lt;/span&gt;
  items&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 附加的方法，我们稍后会用到&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你的store接下来响应了被分配的事件&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ListStore &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; …

AppDispatcher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;eventName &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;new-item&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// 我们得到了变更后（mutate）的数据!&lt;/span&gt;
      ListStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;newItem &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 为了实现Flux的Promise必须加的&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是Flux如何派发回调函数的传统方式。每个payload包含了一个事件名和数据。一个switch分支条件决定具体用什么操作。&lt;/p&gt;
&lt;p&gt;🔑 关键概念：&lt;strong&gt;Store并不是模型（model），一个store包含一个或多个模型（models）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;🔑 关键概念：应用中的每个store只专注于如何更新数据。&lt;strong&gt;这是Flux中最关键的部分。&lt;/strong&gt;我们派发的事件并不知道如何添加或删除数据元素。&lt;/p&gt;
&lt;p&gt;如果，举个例子，你程序中另一部分需要保存一些图片和它们的元数据，你应再新建个store，起名为ImageStore。在程序中，每个store&lt;strong&gt;代表一个单独的“领土”（domain）&lt;/strong&gt;。如果你的程序比较大，领土（domain）需要命名的很容易识别，如果你的程序较小，很可能你只需要1个store。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只有你的store们&lt;/strong&gt;被允许注册到分配器的回调上。你的视图不应该调用&lt;code class=&quot;language-text&quot;&gt;AppDispatcher.register&lt;/code&gt;。分配器只用来从视图向store们发送消息。视图将响应不同于事件的类型。&lt;/p&gt;
&lt;h2 id=&quot;3-store触发了一个change事件&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-store%E8%A7%A6%E5%8F%91%E4%BA%86%E4%B8%80%E4%B8%AAchange%E4%BA%8B%E4%BB%B6&quot; aria-label=&quot;3 store触发了一个change事件 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Store触发了一个change事件&lt;/h2&gt;
&lt;p&gt;我们快接近核心了！现在数据确实改变了，我们要通知全世界。&lt;/p&gt;
&lt;p&gt;你的store触发一个事件，但&lt;strong&gt;不使用分配器&lt;/strong&gt;。这有点令人困惑，但这就是Flux的特殊方式。让我们给我们的store一个触发事件的能力。如果你正在用&lt;a href=&quot;http://notes.jetienne.com/2011/03/22/microeventjs.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;MicroEvent.js&lt;/a&gt;，那么是非常简单的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//MicroEvent.mixin( ListStore );  &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//Then let&apos;s trigger our change event:&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 让我们触发change事件：&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;new-item&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;

  ListStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;newItem &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 向世界大声喊着“我们改变了！”&lt;/span&gt;
  ListStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;change&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;🔑 关键概念：在&lt;code class=&quot;language-text&quot;&gt;触发&lt;/code&gt;change事件时，不用传最新的item值，视图只关心&lt;em&gt;什么东西&lt;/em&gt;发生了改变。让我们继续跟踪数据，去理解到底是为什么。&lt;/p&gt;
&lt;h2 id=&quot;4-event视图响应了change事件&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-event%E8%A7%86%E5%9B%BE%E5%93%8D%E5%BA%94%E4%BA%86change%E4%BA%8B%E4%BB%B6&quot; aria-label=&quot;4 event视图响应了change事件 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Event视图响应了change事件&lt;/h2&gt;
&lt;p&gt;现在我们需要显示列表。列表内容改变时，我们的视图要&lt;strong&gt;完全的重新渲染&lt;/strong&gt;。那不是个错误。&lt;/p&gt;
&lt;p&gt;首先，我们让组件首次被创建时监听从ListStore发来的&lt;code class=&quot;language-text&quot;&gt;change&lt;/code&gt;事件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;token function&quot;&gt;ListStore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;change&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listChanged &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For simplicity’s sake, we’ll just call &lt;code class=&quot;language-text&quot;&gt;forceUpdate&lt;/code&gt;, which triggers a re-render. A different approach would be to store the entire list in &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;为了简单起见，我们只调用&lt;code class=&quot;language-text&quot;&gt;forceUpdate&lt;/code&gt;方法，它触发了一个重绘操作，这是个不同的处理方法，把整个列表存储到&lt;code class=&quot;language-text&quot;&gt;状态(state)&lt;/code&gt;中。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;listChanged&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;token comment&quot;&gt;// Since the list changed, trigger a new render.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forceUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget to clean up your event listeners when your component “unmounts,” which is when it goes back to hell:&lt;/p&gt;
&lt;p&gt;在你的组件卸载时（unmounts），不要忘记清理事件监听：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
  ListStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unbind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;change&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listChanged &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now what? Let’s look at our render function, which I’ve purposely saved for last.&lt;/p&gt;
&lt;p&gt;现在呢？让我们看下我们的渲染函数，这是整个函数的全貌：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 切记，ListStore是全局的&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ListStore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 在整个列表上使用循环创建列表项&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; itemHtml &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// &quot;key&quot;很重要，应该是唯一的，用来标记每个列表项&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; listItem&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; listItem&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; itemHtml &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;createNewItem &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;New Item&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;我们回顾下整个流程。&lt;/strong&gt;当你为列表新添加一项时，&lt;em&gt;view分派一个动作(action)&lt;/em&gt;，store响应这个动作(action)，store随之更新，同时&lt;em&gt;触发&lt;/em&gt;一个change事件，view响应这个change事件进行重绘。&lt;/p&gt;
&lt;p&gt;但还有个问题，当列表改变时我们&lt;strong&gt;重绘整个view&lt;/strong&gt;，这是不是效率太低了？！&lt;/p&gt;
&lt;p&gt;当然不是。&lt;/p&gt;
&lt;p&gt;诚然，我们再一次的调用重绘方法，自然的所有渲染方法的代码都要重新运行。但&lt;strong&gt;React将只重绘你修改了的真正DOM&lt;/strong&gt;。&lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;函数实际上生成了一个”virtual DOM”，React会对比上一次&lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;的输出，如果两个virtual DOM不同，React只会更新他们之间的不同DOM点而不是整个DOM。&lt;/p&gt;
&lt;p&gt;🔑 关键概念：当store数据改变时， &lt;strong&gt;view不应该关心数据是被新添、删除或者是被修改。&lt;/strong&gt; 它们（数据）应完全的重绘。React的“virtual DOM”的diff算法承担了“搞清楚真正的DOM节点变化”的重任。这样让开发者更轻松（原句：让你的生活更简单，避免你的血压升高）。&lt;/p&gt;
&lt;h2 id=&quot;还有一件事：action-creator是个啥玩意？&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E8%BF%98%E6%9C%89%E4%B8%80%E4%BB%B6%E4%BA%8B%EF%BC%9Aaction-creator%E6%98%AF%E4%B8%AA%E5%95%A5%E7%8E%A9%E6%84%8F%EF%BC%9F&quot; aria-label=&quot;还有一件事：action creator是个啥玩意？ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;还有一件事：Action Creator是个啥玩意？&lt;/h2&gt;
&lt;p&gt;记住，当我们点击按钮，我们分派了一个特定的事件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;AppDispatcher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
  eventName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;new-item&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  newItem&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Samantha&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你的许多视图都要需要触发这个事件，那么要重复书写非常多的代码。再加上，你所有的视图需要知道特定的对象格式，这样是很别扭的。所以Flux建议一个抽象，叫做 &lt;strong&gt;action creators（操作生成器）&lt;/strong&gt;，它只是把上面的代码抽象为一个方法。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  ListActions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      AppDispatcher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        eventName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;new-item&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        newItem&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; item
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在视图只要简单的调用&lt;code class=&quot;language-text&quot;&gt;ListActions.add({ name: &amp;#39;...&amp;#39; });&lt;/code&gt;并且不用担心被分配的对象语法了。&lt;/p&gt;
&lt;h2 id=&quot;未回答的问题&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%9C%AA%E5%9B%9E%E7%AD%94%E7%9A%84%E9%97%AE%E9%A2%98&quot; aria-label=&quot;未回答的问题 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;未回答的问题&lt;/h2&gt;
&lt;p&gt;Flux只告诉我们了如何去管理数据流，它并&lt;strong&gt;没有回答&lt;/strong&gt;下面这些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何从服务器上读取和保存数据？&lt;/li&gt;
&lt;li&gt;我应该如何处理组件和非组件之间的通信？&lt;/li&gt;
&lt;li&gt;我应该用什么样的事件库呢？&lt;/li&gt;
&lt;li&gt;为什么Facebook还没有通过库的方式发布Flux？&lt;/li&gt;
&lt;li&gt;我是否应该在store中启用一个数据层（像Backbone）？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题的统一的答案是：&lt;strong&gt;随你便！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;就是这些了&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B0%B1%E6%98%AF%E8%BF%99%E4%BA%9B%E4%BA%86&quot; aria-label=&quot;就是这些了 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;就是这些了&lt;/h2&gt;
&lt;p&gt;访问Facebook提供的&lt;a href=&quot;https://github.com/facebook/flux/tree/master/examples/flux-todomvc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Example Flux Application&lt;/a&gt;作为附加学习资源。希望在读完本文后，&lt;code class=&quot;language-text&quot;&gt;js/&lt;/code&gt;目录下的文件会变得更容易理解吧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/flux/docs/overview.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Flux文档&lt;/a&gt;里面包含了一些非常有用的知识（原文：金块nuggets），这些知识点被埋在了撰写不易文档深处。&lt;/p&gt;
&lt;p&gt;这篇文章帮助你理解Flux，加我的推吧。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React入门&实战]]></title><description><![CDATA[下面内容是前几天在公司内部做ReactJS分享的提纲，DEMO和PDF]]></description><link>http://hkongm.github.io//posts/ReactGuide</link><guid isPermaLink="false">http://hkongm.github.io//posts/ReactGuide</guid><pubDate>Wed, 07 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;下面内容是前几天在公司内部做ReactJS分享的提纲，DEMO和PDF，可以看&lt;a href=&quot;http://github.com/hkongm/reactguide&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;零、介绍&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E9%9B%B6%E3%80%81%E4%BB%8B%E7%BB%8D&quot; aria-label=&quot;零、介绍 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;零、介绍&lt;/h2&gt;
&lt;p&gt;2014年最火热的三个前端技术之一&lt;/p&gt;
&lt;p&gt;其他备选还有AngularJS和另外一个&lt;/p&gt;
&lt;p&gt;作者：Facebook&lt;/p&gt;
&lt;p&gt;相关：Bigpipe、模块开发、模块间的组合、相关&lt;/p&gt;
&lt;h2 id=&quot;一、最简例子&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%80%E3%80%81%E6%9C%80%E7%AE%80%E4%BE%8B%E5%AD%90&quot; aria-label=&quot;一、最简例子 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;一、最简例子&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;React.render() 输出 hello world. &lt;code class=&quot;language-text&quot;&gt;1hello.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;React.render() 第二个参数，选择需要父节点&lt;code class=&quot;language-text&quot;&gt;1append.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello World&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;result&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;二、jsx&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BA%8C%E3%80%81jsx&quot; aria-label=&quot;二、jsx permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;二、JSX&lt;/h2&gt;
&lt;p&gt;JSX是一个XML语法的预处理器。使用React时可以不必使用JSX，但JSX已经基本上成为标配了。由于是XML，所以是&lt;strong&gt;大小写敏感&lt;/strong&gt;的！&lt;code class=&quot;language-text&quot;&gt;3jsx.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Children Text&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;MyCounter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;{3&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;5}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;

var gameScores = {
  player1: 2,
  player2: 5
};
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;DashboardUnit&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-index&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Scores&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Scoreboard&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;{gameScores}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;DashboardUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就像XML一样，JSX的标签包括一个标签名，若干属性，还有子节点。
双引号包起来的是字符串，花括号包起来的是JS表达式。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/docs/jsx-in-depth.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;JSX官方文档&lt;/a&gt;
&lt;a href=&quot;http://facebook.github.io/react/jsx-compiler.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;JSX在线编译器&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;三、组件-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%89%E3%80%81%E7%BB%84%E4%BB%B6-components&quot; aria-label=&quot;三、组件 components permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;三、组件 Components&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;组件是React最最核心的概念！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 这里定义了组件&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; MessageComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 这里使用了组件（渲染到）&lt;/span&gt;
React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MessageComponent message&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code class=&quot;language-text&quot;&gt;React.createClass&lt;/code&gt;来创建一个组件，创建组件只有一个要求，暨需要实现&lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;方法。该方法定义组件将被怎样渲染（指的是HTML结构）。&lt;/p&gt;
&lt;h3 id=&quot;组件的属性-props&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7-props&quot; aria-label=&quot;组件的属性 props permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;组件的属性 Props&lt;/h3&gt;
&lt;p&gt;组件中一个重要的概念就是属性。&lt;code class=&quot;language-text&quot;&gt;4props.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上，前面的例子中已经出现了属性。比如XML例子中的&lt;code class=&quot;language-text&quot;&gt;className&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;scores&lt;/code&gt;，都是组件的属性。这些属性，在组件被render后，可以使用&lt;code class=&quot;language-text&quot;&gt;this.props.&lt;/code&gt;来直接访问到。&lt;/p&gt;
&lt;h2 id=&quot;四、事件-event&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%9B%9B%E3%80%81%E4%BA%8B%E4%BB%B6-event&quot; aria-label=&quot;四、事件 event permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;四、事件 Event&lt;/h2&gt;
&lt;p&gt;首先，创建个组件，后我们要使用行内事件处理器（inline event handlers）进行事件处理。众所周知，&lt;code class=&quot;language-text&quot;&gt;onclick&lt;/code&gt;是个很差的事件处理方案，但是在React中并不是这样。很快我将告诉你为什么，在此之前，先看来学习下React怎么使用事件。&lt;code class=&quot;language-text&quot;&gt;5event.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; BannerAd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;onBannerClick&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// codez to make the moneys&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onBannerClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Click Me&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是这样，你在节点中添加了&lt;code class=&quot;language-text&quot;&gt;onXXX&lt;/code&gt;方法，同时属性值说明了执行函数。&lt;/p&gt;
&lt;p&gt;虽然在创建组件过程中，看上去貌似使用的&lt;code class=&quot;language-text&quot;&gt;onClick={this.handler}&lt;/code&gt;的方式来绑定事件函数，但实际上，最终的事件绑定默认是在document上，默认使用事件代理的方式，通过dom节点上的&lt;code class=&quot;language-text&quot;&gt;data-reactid&lt;/code&gt;属性代理到触发事件的元素。最终完成整个事件处理。&lt;/p&gt;
&lt;p&gt;所以React的事件写法，看上去很古老低效率，但实际上他会帮你优化到极致。如此设计当然是还是模块化，事件跟组件一体而不必去访问组件外的元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意1：组件中&lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt;是大小写敏感的。XML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意2：React中有更高级的事件使用方法，支持冒泡和事件代理，本节课不讲。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;五、状态-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BA%94%E3%80%81%E7%8A%B6%E6%80%81-state&quot; aria-label=&quot;五、状态 state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;五、状态 State&lt;/h2&gt;
&lt;p&gt;到现在为止，这里展示了React的静态渲染引擎，现在我们要介绍状态(&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;)，好让React变得更加的动态。&lt;/p&gt;
&lt;p&gt;状态(&lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;)与属性(&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;)最大的区别在于：状态是组件内部且被组件自行修改的，而属性是可以通过外部注入或者修改的。让我们看个例子：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; StateDemo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 这个方法用来初始化状态&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      clicks&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 这里是事件&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;onBtnClick&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      clicks&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clicks &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;点击数：&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;strong&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clicks&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;strong&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onBtnClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;点我增加点击数&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;StateDemo &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#api&quot; aria-label=&quot;api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API&lt;/h3&gt;
&lt;h5 id=&quot;getinitialstate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#getinitialstate&quot; aria-label=&quot;getinitialstate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;getInitialState&lt;/h5&gt;
&lt;p&gt;该接口返回组件状态的初始化值，键-值对象类型。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    clicks&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;thisstate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thisstate&quot; aria-label=&quot;thisstate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;this.state&lt;/h5&gt;
&lt;p&gt;访问一个组件的状态，使用&lt;code class=&quot;language-text&quot;&gt;this.state&lt;/code&gt;，就像使用&lt;code class=&quot;language-text&quot;&gt;this.props&lt;/code&gt;一样。&lt;/p&gt;
&lt;h5 id=&quot;thissetstate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thissetstate&quot; aria-label=&quot;thissetstate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;this.setState&lt;/h5&gt;
&lt;p&gt;更新一个组件的状态，传入一个键值组合。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Notice how we access the current state here&lt;/span&gt;
  clicks&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clicks &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当组件的一个状态变化时，渲染器将使用新的状态值与UI重新渲染组件。
这是React实现的核心。我们将在下一个章节中着重讲述。&lt;/p&gt;
&lt;p&gt;至此，组件、属性和状态，三个React核心介绍完毕，你可以自己动手使用React了！&lt;/p&gt;
&lt;h2 id=&quot;六、综合例子&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%85%AD%E3%80%81%E7%BB%BC%E5%90%88%E4%BE%8B%E5%AD%90&quot; aria-label=&quot;六、综合例子 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;六、综合例子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;组件的组合&lt;/li&gt;
&lt;li&gt;列表（循环）&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[地铁票价月结计算器]]></title><description><![CDATA[坐地铁时，发现车厢里的小屏幕不停放着如何使用一卡通的视频。其中提到了通勤补助的标准。琢磨了几天，觉得可以做个小玩意，帮大家伙儿算算一个月坐地铁到底花了多少钱。咨询了身边几个人，几乎都不知道有打折的事，看来需求还是有的。如果没有通勤打折的事，也不会有人有这些疑问了。]]></description><link>http://hkongm.github.io//posts/subwaycalc</link><guid isPermaLink="false">http://hkongm.github.io//posts/subwaycalc</guid><pubDate>Sat, 03 Jan 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;坐地铁时，发现车厢里的小屏幕不停放着如何使用一卡通的视频。其中提到了通勤补助的标准。&lt;/p&gt;
&lt;p&gt;琢磨了几天，觉得可以做个小玩意，帮大家伙儿算算一个月坐地铁到底花了多少钱。咨询了身边几个人，几乎都不知道有打折的事，看来需求还是有的。如果没有通勤打折的事，也不会有人有这些疑问了。&lt;/p&gt;
&lt;p&gt;说干就干，伙同公司的UI设计妹子，在元旦假期1号，整了一个出来。&lt;/p&gt;
&lt;p&gt;遂朋友圈分享传播，只加了GA的PV统计，不知道是不是被墙的原因，数据很不好看~&lt;/p&gt;
&lt;p&gt;第一个私人项目，虽然是小玩意，但还是用心的，给自己呱唧呱唧。&lt;/p&gt;
&lt;p&gt;未用JS库，使用了SASS，Media Query。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hkongm/subwaycalc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PC访问&lt;a href=&quot;http://hkongm.github.io/qing/subwaycalc/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;封面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/imgs/qing_subwaycalc.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;移动用户可以扫描此二维码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/imgs/qing_subwaycalc_qr.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[给新手（笨笨）准备的ReactJS介绍]]></title><description><![CDATA[我挣扎了很久，试图理解React是个啥，它整个的架构是个啥。这篇文章正好满足了我的这个愿望。]]></description><link>http://hkongm.github.io//posts/ReactJSForStupidPeople</link><guid isPermaLink="false">http://hkongm.github.io//posts/ReactJSForStupidPeople</guid><pubDate>Sat, 01 Nov 2014 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://blog.andrewray.me/reactjs-for-stupid-people/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://blog.andrewray.me/reactjs-for-stupid-people/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;篇幅过长，没有阅读（&lt;a href=&quot;http://zhidao.baidu.com/link?url=J-CJXq3dC4oPgQacI5pukD_S4-9HagnMMGB4YJT9hUFufaHxH7enybUz7e6vBEpW4IyV8wOZqNLvl_CMEYs6Jq&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TL;DR&lt;/a&gt;）。我挣扎了很久，试图理解React是个啥，它整个的架构是个啥。这篇文章正好满足了我的这个愿望。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;react是什么&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react%E6%98%AF%E4%BB%80%E4%B9%88&quot; aria-label=&quot;react是什么 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React是什么&lt;/h2&gt;
&lt;p&gt;React与Angular，Ember，Backbone这类框架相比到底有啥区别？怎么处理数据？怎么与服务器通信？JSX又是TMD啥东东？“组件（component）”又应该怎么理解？&lt;/p&gt;
&lt;p&gt;停&lt;/p&gt;
&lt;p&gt;立马停止&lt;/p&gt;
&lt;h3 id=&quot;react只是一个视图层的东西&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E8%A7%86%E5%9B%BE%E5%B1%82%E7%9A%84%E4%B8%9C%E8%A5%BF&quot; aria-label=&quot;react只是一个视图层的东西 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React只是一个视图层的东西&lt;/h3&gt;
&lt;!-- more --&gt;
&lt;p&gt;近来，在讨论JS框架的时候，React经常会被提及，但“React对比Angular”这种说法根本就不合理，因为他们就不是一种东西（框架）。Angular是一个完整的框架（包括视图），React则不是这么一种完备的框架。这就是为什么React这么难以理解，虽然目前正在形成一个基于React框架的完整的生态系统，但它本质上只是一个视图（view）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;译者注：View layer指的是MVC的V，这里翻译成视图层&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;React提供给我们一套模板语言和一些功能函数，让我们任意操作和渲染我们的HTML。HTML就是React输出的所有内容了。HTML/Javascript这样的组合，我们称之为“组件（Components）”，而这些组件又可以在内存中保存自己的一些状态（比如在tab选择组件中保存当前选择的哪个tab），但是说到底，这些依然只是HTML。&lt;/p&gt;
&lt;p&gt;你绝对&lt;strong&gt;不可能单独使用React来创建一个功能健全的动态应用程序&lt;/strong&gt;。下面就让我们来看下为什么。&lt;/p&gt;
&lt;h2 id=&quot;优点&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BC%98%E7%82%B9&quot; aria-label=&quot;优点 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;优点&lt;/h2&gt;
&lt;p&gt;在使用React一段时间后，我发现它3个很重要的优点（benefits surface：优势面）。&lt;/p&gt;
&lt;h4 id=&quot;1-你可以只观察一个源文件就知道组件会如何渲染页面&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%8F%AA%E8%A7%82%E5%AF%9F%E4%B8%80%E4%B8%AA%E6%BA%90%E6%96%87%E4%BB%B6%E5%B0%B1%E7%9F%A5%E9%81%93%E7%BB%84%E4%BB%B6%E4%BC%9A%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2&quot; aria-label=&quot;1 你可以只观察一个源文件就知道组件会如何渲染页面 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 你可以只观察一个源文件就知道组件会如何渲染页面&lt;/h4&gt;
&lt;p&gt;这也许是所有优势中最重要的一个，他和Angular提供的模板完全不同。让我们用一个真实的例子来说明下。&lt;/p&gt;
&lt;p&gt;在你没有使用Javascript MVC框架的情况下，你想在用户登陆后改变页面头部的状态，你可能会这么做：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/login&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; credentials&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Modify the DOM here&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 在这里修改DOM&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;header .name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我可以凭经验告诉你，这段代码足以葬送你还有你朋友们的一生。你怎么调试输出结果？谁来更新头部？还有谁在使用头部的HTML？谁来保证当用户名显示出来时的实际效果？这个DOM操作就&lt;strong&gt;像GOTO跳转语句一样烂&lt;/strong&gt;皆因你写的这段程序。&lt;/p&gt;
&lt;p&gt;下面是用React重写的版本：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;header&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以马上告诉这个组件将怎样渲染。如果你知道当前的状态，你就可以知道渲染输出的结果。你不必调试你的程序流。当我们在开发一个复杂的应用程序时，特别是团队合作的项目是，这是非常重要（critically致命）的一点。&lt;/p&gt;
&lt;h4 id=&quot;2-使用包含javascript和html的jsx来制作组件，使理解起来更容易&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%E4%BD%BF%E7%94%A8%E5%8C%85%E5%90%ABjavascript%E5%92%8Chtml%E7%9A%84jsx%E6%9D%A5%E5%88%B6%E4%BD%9C%E7%BB%84%E4%BB%B6%EF%BC%8C%E4%BD%BF%E7%90%86%E8%A7%A3%E8%B5%B7%E6%9D%A5%E6%9B%B4%E5%AE%B9%E6%98%93&quot; aria-label=&quot;2 使用包含javascript和html的jsx来制作组件，使理解起来更容易 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 使用包含Javascript和HTML的JSX来制作组件，使理解起来更容易&lt;/h4&gt;
&lt;p&gt;混和着HTML和Javascript的这怪异的一锅粥（soup：汤）可能使你退缩。从我们成为一名程序员那时起，就习惯了不在DOM中写Javascript（比如 &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt; 处理函数）。你要相信我，写JSX组件是非常棒的体验。&lt;/p&gt;
&lt;p&gt;一般来讲，我们要隔离视图（HTML）与功能（Javascript）。这就导致了我们大量的Javascript文件包含了一个“页面”的所有功能，而后，你不得这复杂的环境中（JS到HTML再到JS）调试，追踪错误等。&lt;/p&gt;
&lt;p&gt;一般的情况下，直接编写（单一）功能并打包为一个随处可用的标签，这样的自包含“组件”会让这个编码过程变得更快乐、更干净。既然你的Javascript代码和HTML是密不可分的，那么就让他们幸福滴在一起吧。&lt;/p&gt;
&lt;h3 id=&quot;你可以在服务端渲染react&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93react&quot; aria-label=&quot;你可以在服务端渲染react permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;你可以在服务端渲染React&lt;/h3&gt;
&lt;p&gt;如果你正在构建一个公开站点或者App，而同时又遵循着“所有渲染应该发生在客户端”这一原则的话，那么你就错了。为什么 &lt;a href=&quot;https://soundcloud.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Soundcloud&lt;/a&gt; 感觉很慢，而 &lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Stack Overflow&lt;/a&gt; 感觉非常快？皆因前者是单客户端渲染机制。你可以&lt;a href=&quot;https://www.npmjs.org/package/react-server-example&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;在服务端渲染React&lt;/a&gt;，而且你也应该尝试下。&lt;/p&gt;
&lt;p&gt;Angular和其他的框架鼓励你做一些：使用PhantomJS渲染你的页面；基于UA为了搜索引擎爬虫做服务或者&lt;a href=&quot;https://prerender.io/pricing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;为类似的服务付钱&lt;/a&gt;，诸如此类恶心的事情。&lt;/p&gt;
&lt;h2 id=&quot;缺点&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E7%BC%BA%E7%82%B9&quot; aria-label=&quot;缺点 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;缺点&lt;/h2&gt;
&lt;p&gt;不要忘了React&lt;strong&gt;只是个视图&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-你不会从react中找到下面任何一个功能&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%E4%BD%A0%E4%B8%8D%E4%BC%9A%E4%BB%8Ereact%E4%B8%AD%E6%89%BE%E5%88%B0%E4%B8%8B%E9%9D%A2%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD&quot; aria-label=&quot;1 你不会从react中找到下面任何一个功能 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 你不会从React中找到下面任何一个功能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;事件系统（（即使是）与vanilla DOM 事件相比）&lt;/li&gt;
&lt;li&gt;AJAX功能&lt;/li&gt;
&lt;li&gt;数据层（Model）的表单&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;完整应用程序框架&lt;/li&gt;
&lt;li&gt;任何基于上面功能的想法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;译者注：Vanilla JS，世界上最轻量级的Javascript框架。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;React在它自己的&lt;strong&gt;对真实世界是毫无用处&lt;/strong&gt;上（这句好难翻，貌似少个谓语动词，很不通，大意就是比较烂）。更糟糕的是，正如我们所看到的，这促使每个人重新发明轮子。&lt;/p&gt;
&lt;h4 id=&quot;2官方文档超级烂&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E8%B6%85%E7%BA%A7%E7%83%82&quot; aria-label=&quot;2官方文档超级烂 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.官方文档超级烂&lt;/h4&gt;
&lt;p&gt;重提一句，本篇博客是为新手（笨笨）写的。看看&lt;a href=&quot;http://facebook.github.io/react/docs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;官方文档页面&lt;/a&gt;侧栏的第一部分吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.andrewray.me/content/images/2014/Sep/Screen-Shot-2014-09-22-at-12-08-18-AM.png&quot; alt=&quot;Quick Start&quot;&gt;&lt;/p&gt;
&lt;p&gt;快速开始向导这里只有3个部分。即便是我在没喝醉的情况下，我依然崩溃（万念俱灰）了。更下面的部分简直可以称得上是噩梦，这些章节很明显不应该出现在这里，比如“更多的参考”和“PureRenderMixin”&lt;em&gt;（译者注：这个词专有名词不翻）&lt;/em&gt;。&lt;/p&gt;
&lt;h4 id=&quot;3-react库代码量大&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-react%E5%BA%93%E4%BB%A3%E7%A0%81%E9%87%8F%E5%A4%A7&quot; aria-label=&quot;3 react库代码量大 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. React库代码量大&lt;/h4&gt;
&lt;p&gt;更新：React并不是我之前文章写的144kb大，如下图，在&lt;strong&gt;gzip&lt;/strong&gt;后，大约是&lt;strong&gt;35kb&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;译者注：上面一段是博客原文评论区有个网友回复提出来的观点，后作者对本文做了上面一段的更正。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.andrewray.me/content/images/2014/Oct/react-size.png&quot; alt=&quot;瀑布图&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是在&lt;strong&gt;不加载任何React插件库&lt;/strong&gt;的情况下的结果！&lt;/p&gt;
&lt;p&gt;这是在&lt;strong&gt;不加载ES5 Shim库&lt;/strong&gt;的情况下，不用考虑支持IE8浏览器的情况下的结果！&lt;/p&gt;
&lt;p&gt;这是在&lt;strong&gt;不加载&lt;/strong&gt;任何应用程序库（上面提到的Angular/Backbone等等）的情况下的结果。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;译者注：作者连说了三遍，表示对这种情况已经怒不可遏了&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;相对于Angular这个完整的应用程序框架，React本身大小已经堪比Angular了。React还老老实实地提供了许多你会用到的小功能使自己变得臃肿，其希望我们在开发中能提升效率。&lt;/p&gt;
&lt;h2 id=&quot;不要再谈论flux了&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%B8%8D%E8%A6%81%E5%86%8D%E8%B0%88%E8%AE%BAflux%E4%BA%86&quot; aria-label=&quot;不要再谈论flux了 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;不要再谈论Flux了&lt;/h2&gt;
&lt;p&gt;也许，“Flux”是使用React进行开发时，被争执最多的一个部分了。它远比React自身更加的难理解。“Flux”这个名字就已经很装逼了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根本没有Flux这个东西。&lt;/strong&gt; Flux是一个概念，不是库。好吧，这里算有这么个&lt;a href=&quot;https://github.com/facebook/flux&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;库&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Flux比起库更像个模式”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;呃。最烂的部分就是这个名字：React并没有重新发明（颠覆）过去40年来的UI架构知识体系也并没有带来数据管理的新理念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Flux”概念简单得如下&lt;/strong&gt;，你的视图（&lt;em&gt;译者注：MVC中的V&lt;/em&gt;）触发一个事件，这个事件更新了一个模型（&lt;em&gt;译者注：MVC中的M&lt;/em&gt;），然后这个模型再触发一个事件，这个视图（&lt;em&gt;译者注：MVC中的M&lt;/em&gt;）响应刚刚这个由模型触发的事件，使用最新的数据再渲染。&lt;strong&gt;仅此而已&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这种单向数据流 / 解耦的观察者模式被设计成可以保证你有效的数据一直存在你的存储器或者模型中。这是一个好事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flux不好的一面&lt;/strong&gt;就是每个人都需要重新发明它。至今依然没有一个事件库，模型层，AJAX功能层或者其他的任何功能，&lt;a href=&quot;https://www.npmjs.org/package/compose-flux-dispatcher&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;这里&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/flux-action&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;有&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/react-flux&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;一些&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/fluxxor&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;不同&lt;/a&gt;的“&lt;a href=&quot;https://www.npmjs.org/package/reflux&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Flux&lt;/a&gt;”实现，但它们彼此之间完全不兼容（冲突）。&lt;/p&gt;
&lt;h2 id=&quot;那么我该用react么？&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E9%82%A3%E4%B9%88%E6%88%91%E8%AF%A5%E7%94%A8react%E4%B9%88%EF%BC%9F&quot; aria-label=&quot;那么我该用react么？ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;那么我该用React么？&lt;/h2&gt;
&lt;p&gt;简单的回答：应该。&lt;/p&gt;
&lt;p&gt;较长的回答：不幸是，可以用，在大多数地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里是为什么&lt;/strong&gt;你应该使用React：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对团队协作很有益，尤其是用户界面构建工作上（直译：大力实施UI和工作流模式）&lt;/li&gt;
&lt;li&gt;UI代码是易读且易维护的，组件化的用户界面是web开发的未来趋势，你需要现在开始做起来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在你切换React前，&lt;strong&gt;你应慎重的再度思考如下问题&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改用React，在最开始会极大地拖慢你的速度，理解属性、状态和组件之间的通信机制不是一件容易的事情，再加上官方文档那么烂。在你的整个团队都搞定前，理论上，这种情况将会持续下去。&lt;/li&gt;
&lt;li&gt;React不支持IE8及以下浏览器，未来也不会支持。&lt;/li&gt;
&lt;li&gt;如果你的程序/网站并没有非常多的动态页面更新，你将要为微小的提升编写大量的实现代码。&lt;/li&gt;
&lt;li&gt;你要重新发明许多轮子。React还年轻，还没有正式的事件/组件通信机制，你不得不从零开始，建立你的组件库。你的应用里有下拉菜单、更改窗口大小或者轮播（灯箱）效果么？你很可能不得不重新开始写这些功能了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;就是这些！&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E5%B0%B1%E6%98%AF%E8%BF%99%E4%BA%9B%EF%BC%81&quot; aria-label=&quot;就是这些！ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;就是这些！&lt;/h2&gt;
&lt;p&gt;我的下面一篇文章&lt;a href=&quot;http://blog.andrewray.me/flux-for-stupid-people/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;给新手（笨笨）准备的Flux介绍&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我希望这篇文章可以帮助一些向我一样笨的朋友更好的理解React。如果这篇文章能让你的生活更简单，那么在Twitter上follow我吧。&lt;/p&gt;</content:encoded></item></channel></rss>